; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 657
OpCapability Shader
OpExtension "SPV_KHR_storage_buffer_storage_class"
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %354 "gen_terrain_compute" %351
OpEntryPoint Vertex %424 "gen_terrain_vertex" %415 %418 %420 %422
OpEntryPoint Fragment %477 "gen_terrain_fragment" %467 %469 %472 %475 %476
OpEntryPoint Vertex %568 "vs_main" %559 %562 %564 %565 %567
OpEntryPoint Fragment %594 "fs_main" %587 %589 %591 %593
OpExecutionMode %354 LocalSize 64 1 1
OpExecutionMode %477 OriginUpperLeft
OpExecutionMode %594 OriginUpperLeft
%3 = OpString "debug-symbol-terrain"
OpSource Unknown 0 %3 "// Taken from https://github.com/sotrh/learn-wgpu/blob/11820796f5e1dbce42fb1119f04ddeb4b167d2a0/code/intermediate/tutorial13-terrain/src/terrain.wgsl
// ============================
// Terrain Generation
// ============================

// https://gist.github.com/munrocket/236ed5ba7e409b8bdf1ff6eca5dcdc39
//  MIT License. Â© Ian McEwan, Stefan Gustavson, Munrocket
// - Less condensed glsl implementation with comments can be found at https://weber.itn.liu.se/~stegu/jgt2012/article.pdf

fn permute3(x: vec3<f32>) -> vec3<f32> { return (((x * 34.) + 1.) * x) % vec3<f32>(289.); }

fn snoise2(v: vec2<f32>) -> f32 {
    let C = vec4<f32>(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    var i: vec2<f32> = floor(v + dot(v, C.yy));
    let x0 = v - i + dot(i, C.xx);
    // I flipped the condition here from > to < as it fixed some artifacting I was observing
    var i1: vec2<f32> = select(vec2<f32>(1., 0.), vec2<f32>(0., 1.), (x0.x < x0.y));
    var x12: vec4<f32> = x0.xyxy + C.xxzz - vec4<f32>(i1, 0., 0.);
    i = i % vec2<f32>(289.);
    let p = permute3(permute3(i.y + vec3<f32>(0., i1.y, 1.)) + i.x + vec3<f32>(0., i1.x, 1.));
    var m: vec3<f32> = max(0.5 - vec3<f32>(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), vec3<f32>(0.));
    m = m * m;
    m = m * m;
    let x = 2. * fract(p * C.www) - 1.;
    let h = abs(x) - 0.5;
    let ox = floor(x + 0.5);
    let a0 = x - ox;
    m = m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h));
    let g = vec3<f32>(a0.x * x0.x + h.x * x0.y, a0.yz * x12.xz + h.yz * x12.yw);
    return 130. * dot(m, g);
}


fn fbm(p: vec2<f32>) -> f32 {
    let NUM_OCTAVES: u32 = 5u;
    var x = p * 0.01;
    var v = 0.0;
    var a = 0.5;
    let shift = vec2<f32>(100.0);
    let cs = vec2<f32>(cos(0.5), sin(0.5));
    let rot = mat2x2<f32>(cs.x, cs.y, -cs.y, cs.x);

    for (var i = 0u; i < NUM_OCTAVES; i = i + 1u) {
        v = v + a * snoise2(x);
        x = rot * x * 2.0 + shift;
        a = a * 0.5;
    }

    return v;
}

struct ChunkData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
}

struct Vertex {
    @location(0) position: vec3<f32>,
    @location(1) normal: vec3<f32>,
}

struct VertexBuffer {
    data: array<Vertex>, // stride: 32
}

struct IndexBuffer {
    data: array<u32>,
}

@group(0) @binding(0) var<uniform> chunk_data: ChunkData;
@group(0) @binding(1) var<storage, read_write> vertices: VertexBuffer;
@group(0) @binding(2) var<storage, read_write> indices: IndexBuffer;

fn terrain_point(p: vec2<f32>, min_max_height: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        p.x,
        mix(min_max_height.x, min_max_height.y, fbm(p)),
        p.y,
    );
}

fn terrain_vertex(p: vec2<f32>, min_max_height: vec2<f32>) -> Vertex {
    let v = terrain_point(p, min_max_height);

    let tpx = terrain_point(p + vec2<f32>(0.1, 0.0), min_max_height) - v;
    let tpz = terrain_point(p + vec2<f32>(0.0, 0.1), min_max_height) - v;
    let tnx = terrain_point(p + vec2<f32>(-0.1, 0.0), min_max_height) - v;
    let tnz = terrain_point(p + vec2<f32>(0.0, -0.1), min_max_height) - v;

    let pn = normalize(cross(tpz, tpx));
    let nn = normalize(cross(tnz, tnx));

    let n = (pn + nn) * 0.5;

    return Vertex(v, n);
}

fn index_to_p(vert_index: u32, chunk_size: vec2<u32>, chunk_corner: vec2<i32>) -> vec2<f32> {
    return vec2(
        f32(vert_index) % f32(chunk_size.x + 1u),
        f32(vert_index / (chunk_size.x + 1u)),
    ) + vec2<f32>(chunk_corner);
}

@compute @workgroup_size(64)
fn gen_terrain_compute(
    @builtin(global_invocation_id) gid: vec3<u32>
) {
    // Create vert_component
    let vert_index = gid.x;

    let p = index_to_p(vert_index, chunk_data.chunk_size, chunk_data.chunk_corner);

    vertices.data[vert_index] = terrain_vertex(p, chunk_data.min_max_height);

    // Create indices
    let start_index = gid.x * 6u; // using TriangleList

    if (start_index >= (chunk_data.chunk_size.x * chunk_data.chunk_size.y * 6u)) { return; }

    let v00 = vert_index + gid.x / chunk_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + chunk_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    indices.data[start_index] = v00;
    indices.data[start_index + 1u] = v01;
    indices.data[start_index + 2u] = v11;
    indices.data[start_index + 3u] = v00;
    indices.data[start_index + 4u] = v11;
    indices.data[start_index + 5u] = v10;
}

// ============================
// Terrain Gen (Fragment Shader)
// ============================

struct GenData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
    texture_size: u32,
    start_index: u32,
}
@group(0)
@binding(0)
var<uniform> gen_data: GenData;

struct GenVertexOutput {
    @location(0)
    index: u32,
    @builtin(position)
    position: vec4<f32>,
    @location(1)
    uv: vec2<f32>,
};

@vertex
fn gen_terrain_vertex(@builtin(vertex_index) vindex: u32) -> GenVertexOutput {
    let u = f32(((vindex + 2u) / 3u) % 2u);
    let v = f32(((vindex + 1u) / 3u) % 2u);
    let uv = vec2<f32>(u, v);

    let position = vec4<f32>(-1.0 + uv * 2.0, 0.0, 1.0);

    // TODO: maybe replace this with u32(dot(uv, vec2(f32(gen_data.texture_dim.x))))
    let index = u32(uv.x * f32(gen_data.texture_size) + uv.y * f32(gen_data.texture_size)) + gen_data.start_index;

    return GenVertexOutput(index, position, uv);
}


struct GenFragmentOutput {
    @location(0) vert_component: u32,
    @location(1) index: u32,
}

@fragment
fn gen_terrain_fragment(in: GenVertexOutput) -> GenFragmentOutput {
    let i = u32(in.uv.x * f32(gen_data.texture_size) + in.uv.y * f32(gen_data.texture_size * gen_data.texture_size)) + gen_data.start_index;
    let vert_index = u32(floor(f32(i) / 6.));
    let comp_index = i % 6u;

    let p = index_to_p(vert_index, gen_data.chunk_size, gen_data.chunk_corner);
    let v = terrain_vertex(p, gen_data.min_max_height);

    var vert_component: f32 = 0.;
    
    switch comp_index {
        case 0u: { vert_component = v.position.x; }
        case 1u: { vert_component = v.position.y; }
        case 2u: { vert_component = v.position.z; }
        case 3u: { vert_component = v.normal.x; }
        case 4u: { vert_component = v.normal.y; }
        case 5u: { vert_component = v.normal.z; }
        default: {}
    }

    let v00 = vert_index + vert_index / gen_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + gen_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    var index = 0u;
    switch comp_index {
        case 0u, 3u: { index = v00; }
        case 2u, 4u: { index = v11; }
        case 1u: { index = v01; }
        case 5u: { index = v10; }
        default: {}
    }
    index = in.index;
    // index = gen_data.start_index;
    // indices.data[start_index] = v00;
    // indices.data[start_index + 1u] = v01;
    // indices.data[start_index + 2u] = v11;
    // indices.data[start_index + 3u] = v00;
    // indices.data[start_index + 4u] = v11;
    // indices.data[start_index + 5u] = v10;

    let ivert_component = bitcast<u32>(vert_component);
    return GenFragmentOutput(ivert_component, index);
}

// ============================
// Terrain Rendering
// ============================

struct Camera {
    view_pos: vec4<f32>,
    view_proj: mat4x4<f32>,
}
@group(0) @binding(0)
var<uniform> camera: Camera;

struct Light {
    position: vec3<f32>,
    color: vec3<f32>,
}
@group(1) @binding(0)
var<uniform> light: Light;

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) normal: vec3<f32>,
    @location(1) world_pos: vec3<f32>,
}

@vertex
fn vs_main(
    vertex: Vertex,
) -> VertexOutput {
    let clip_position = camera.view_proj * vec4<f32>(vertex.position, 1.);
    let normal = vertex.normal;
    return VertexOutput(clip_position, normal, vertex.position);
}

@group(2) @binding(0)
var t_diffuse: texture_2d<f32>;
@group(2) @binding(1)
var s_diffuse: sampler;
@group(2) @binding(2)
var t_normal: texture_2d<f32>;
@group(2) @binding(3)
var s_normal: sampler;

fn color23(p: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        snoise2(p) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(23., 32.)) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(-43., 3.)) * 0.5 + 0.5,
    );
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    var color = smoothstep(vec3<f32>(0.0), vec3<f32>(0.1), fract(in.world_pos));
    color = mix(vec3<f32>(0.5, 0.1, 0.7), vec3<f32>(0.2, 0.2, 0.2), vec3<f32>(color.x * color.y * color.z));

    let ambient_strength = 0.1;
    let ambient_color = light.color * ambient_strength;

    let light_dir = normalize(light.position - in.world_pos);
    let view_dir = normalize(camera.view_pos.xyz - in.world_pos);
    let half_dir = normalize(view_dir + light_dir);

    let diffuse_strength = max(dot(in.normal, light_dir), 0.0);
    let diffuse_color = diffuse_strength * light.color;

    let specular_strength = pow(max(dot(in.normal, half_dir), 0.0), 32.0);
    let specular_color = specular_strength * light.color;

    let result = (ambient_color + diffuse_color + specular_color) * color;

    return vec4<f32>(result, 1.0);
}"
OpMemberName %13 0 "chunk_size"
OpMemberName %13 1 "chunk_corner"
OpMemberName %13 2 "min_max_height"
OpName %13 "ChunkData"
OpMemberName %14 0 "position"
OpMemberName %14 1 "normal"
OpName %14 "Vertex"
OpMemberName %16 0 "data"
OpName %16 "VertexBuffer"
OpMemberName %18 0 "data"
OpName %18 "IndexBuffer"
OpMemberName %20 0 "chunk_size"
OpMemberName %20 1 "chunk_corner"
OpMemberName %20 2 "min_max_height"
OpMemberName %20 3 "texture_size"
OpMemberName %20 4 "start_index"
OpName %20 "GenData"
OpMemberName %21 0 "index"
OpMemberName %21 1 "position"
OpMemberName %21 2 "uv"
OpName %21 "GenVertexOutput"
OpMemberName %22 0 "vert_component"
OpMemberName %22 1 "index"
OpName %22 "GenFragmentOutput"
OpMemberName %24 0 "view_pos"
OpMemberName %24 1 "view_proj"
OpName %24 "Camera"
OpMemberName %25 0 "position"
OpMemberName %25 1 "color"
OpName %25 "Light"
OpMemberName %26 0 "clip_position"
OpMemberName %26 1 "normal"
OpMemberName %26 2 "world_pos"
OpName %26 "VertexOutput"
OpName %29 "chunk_data"
OpName %32 "vertices"
OpName %34 "indices"
OpName %36 "gen_data"
OpName %39 "camera"
OpName %42 "light"
OpName %45 "t_diffuse"
OpName %47 "s_diffuse"
OpName %49 "t_normal"
OpName %50 "s_normal"
OpName %52 "x"
OpName %53 "permute3"
OpName %66 "i"
OpName %69 "i1"
OpName %70 "x12"
OpName %73 "m"
OpName %77 "v"
OpName %78 "snoise2"
OpName %207 "x"
OpName %208 "v"
OpName %211 "a"
OpName %212 "i"
OpName %216 "p"
OpName %217 "fbm"
OpName %263 "p"
OpName %264 "min_max_height"
OpName %265 "terrain_point"
OpName %276 "p"
OpName %277 "min_max_height"
OpName %278 "terrain_vertex"
OpName %309 "vert_index"
OpName %310 "chunk_size"
OpName %311 "chunk_corner"
OpName %312 "index_to_p"
OpName %328 "p"
OpName %329 "color23"
OpName %351 "gid"
OpName %354 "gen_terrain_compute"
OpName %415 "vindex"
OpName %418 "index"
OpName %420 "position"
OpName %422 "uv"
OpName %424 "gen_terrain_vertex"
OpName %463 "vert_component"
OpName %464 "index"
OpName %467 "index"
OpName %469 "position"
OpName %472 "uv"
OpName %475 "vert_component"
OpName %476 "index"
OpName %477 "gen_terrain_fragment"
OpName %559 "position"
OpName %562 "normal"
OpName %564 "clip_position"
OpName %565 "normal"
OpName %567 "world_pos"
OpName %568 "vs_main"
OpName %584 "color"
OpName %587 "clip_position"
OpName %589 "normal"
OpName %591 "world_pos"
OpName %594 "fs_main"
OpMemberDecorate %13 0 Offset 0
OpMemberDecorate %13 1 Offset 8
OpMemberDecorate %13 2 Offset 16
OpMemberDecorate %14 0 Offset 0
OpMemberDecorate %14 1 Offset 16
OpDecorate %15 ArrayStride 32
OpMemberDecorate %16 0 Offset 0
OpDecorate %17 ArrayStride 4
OpMemberDecorate %18 0 Offset 0
OpMemberDecorate %20 0 Offset 0
OpMemberDecorate %20 1 Offset 8
OpMemberDecorate %20 2 Offset 16
OpMemberDecorate %20 3 Offset 24
OpMemberDecorate %20 4 Offset 28
OpMemberDecorate %21 0 Offset 0
OpMemberDecorate %21 1 Offset 16
OpMemberDecorate %21 2 Offset 32
OpMemberDecorate %22 0 Offset 0
OpMemberDecorate %22 1 Offset 4
OpMemberDecorate %24 0 Offset 0
OpMemberDecorate %24 1 Offset 16
OpMemberDecorate %24 1 ColMajor
OpMemberDecorate %24 1 MatrixStride 16
OpMemberDecorate %25 0 Offset 0
OpMemberDecorate %25 1 Offset 16
OpMemberDecorate %26 0 Offset 0
OpMemberDecorate %26 1 Offset 16
OpMemberDecorate %26 2 Offset 32
OpDecorate %29 DescriptorSet 0
OpDecorate %29 Binding 0
OpDecorate %30 Block
OpMemberDecorate %30 0 Offset 0
OpDecorate %32 DescriptorSet 0
OpDecorate %32 Binding 1
OpDecorate %16 Block
OpDecorate %34 DescriptorSet 0
OpDecorate %34 Binding 2
OpDecorate %18 Block
OpDecorate %36 DescriptorSet 0
OpDecorate %36 Binding 0
OpDecorate %37 Block
OpMemberDecorate %37 0 Offset 0
OpDecorate %39 DescriptorSet 0
OpDecorate %39 Binding 0
OpDecorate %40 Block
OpMemberDecorate %40 0 Offset 0
OpDecorate %42 DescriptorSet 1
OpDecorate %42 Binding 0
OpDecorate %43 Block
OpMemberDecorate %43 0 Offset 0
OpDecorate %45 DescriptorSet 2
OpDecorate %45 Binding 0
OpDecorate %47 DescriptorSet 2
OpDecorate %47 Binding 1
OpDecorate %49 DescriptorSet 2
OpDecorate %49 Binding 2
OpDecorate %50 DescriptorSet 2
OpDecorate %50 Binding 3
OpDecorate %351 BuiltIn GlobalInvocationId
OpDecorate %415 BuiltIn VertexIndex
OpDecorate %418 Location 0
OpDecorate %418 Flat
OpDecorate %420 BuiltIn Position
OpDecorate %422 Location 1
OpDecorate %467 Location 0
OpDecorate %467 Flat
OpDecorate %469 BuiltIn FragCoord
OpDecorate %472 Location 1
OpDecorate %475 Location 0
OpDecorate %476 Location 1
OpDecorate %559 Location 0
OpDecorate %562 Location 1
OpDecorate %564 BuiltIn Position
OpDecorate %565 Location 0
OpDecorate %567 Location 1
OpDecorate %587 BuiltIn FragCoord
OpDecorate %589 Location 0
OpDecorate %591 Location 1
OpDecorate %593 Location 0
%2 = OpTypeVoid
%5 = OpTypeFloat 32
%4 = OpTypeVector %5 3
%6 = OpTypeVector %5 2
%7 = OpTypeVector %5 4
%8 = OpTypeInt 32 0
%9 = OpTypeMatrix %6 2
%10 = OpTypeVector %8 2
%12 = OpTypeInt 32 1
%11 = OpTypeVector %12 2
%13 = OpTypeStruct %10 %11 %6
%14 = OpTypeStruct %4 %4
%15 = OpTypeRuntimeArray %14
%16 = OpTypeStruct %15
%17 = OpTypeRuntimeArray %8
%18 = OpTypeStruct %17
%19 = OpTypeVector %8 3
%20 = OpTypeStruct %10 %11 %6 %8 %8
%21 = OpTypeStruct %8 %7 %6
%22 = OpTypeStruct %8 %8
%23 = OpTypeMatrix %7 4
%24 = OpTypeStruct %7 %23
%25 = OpTypeStruct %4 %4
%26 = OpTypeStruct %7 %4 %4
%27 = OpTypeImage %5 2D 0 0 0 1 Unknown
%28 = OpTypeSampler
%30 = OpTypeStruct %13
%31 = OpTypePointer Uniform %30
%29 = OpVariable  %31  Uniform
%33 = OpTypePointer StorageBuffer %16
%32 = OpVariable  %33  StorageBuffer
%35 = OpTypePointer StorageBuffer %18
%34 = OpVariable  %35  StorageBuffer
%37 = OpTypeStruct %20
%38 = OpTypePointer Uniform %37
%36 = OpVariable  %38  Uniform
%40 = OpTypeStruct %24
%41 = OpTypePointer Uniform %40
%39 = OpVariable  %41  Uniform
%43 = OpTypeStruct %25
%44 = OpTypePointer Uniform %43
%42 = OpVariable  %44  Uniform
%46 = OpTypePointer UniformConstant %27
%45 = OpVariable  %46  UniformConstant
%48 = OpTypePointer UniformConstant %28
%47 = OpVariable  %48  UniformConstant
%49 = OpVariable  %46  UniformConstant
%50 = OpVariable  %48  UniformConstant
%54 = OpTypeFunction %4 %4
%55 = OpConstant  %5  34.0
%56 = OpConstant  %5  1.0
%57 = OpConstant  %5  289.0
%67 = OpTypePointer Function %6
%68 = OpConstantNull  %6
%71 = OpTypePointer Function %7
%72 = OpConstantNull  %7
%74 = OpTypePointer Function %4
%75 = OpConstantNull  %4
%79 = OpTypeFunction %5 %6
%80 = OpConstant  %5  0.21132487
%81 = OpConstant  %5  0.36602542
%82 = OpConstant  %5  -0.57735026
%83 = OpConstant  %5  0.024390243
%84 = OpConstant  %5  0.0
%85 = OpConstant  %5  0.5
%86 = OpConstant  %5  2.0
%87 = OpConstant  %5  1.7928429
%88 = OpConstant  %5  0.85373473
%89 = OpConstant  %5  130.0
%108 = OpTypeBool
%111 = OpTypeVector %108 2
%122 = OpTypePointer Function %5
%123 = OpConstant  %8  1
%132 = OpConstant  %8  0
%209 = OpTypePointer Function %5
%210 = OpConstantNull  %5
%213 = OpTypePointer Function %8
%214 = OpConstantNull  %8
%218 = OpConstant  %8  5
%219 = OpConstant  %5  0.01
%220 = OpConstant  %5  100.0
%266 = OpTypeFunction %4 %6 %6
%279 = OpTypeFunction %14 %6 %6
%280 = OpConstant  %5  0.1
%281 = OpConstant  %5  -0.1
%313 = OpTypeFunction %6 %8 %10 %11
%330 = OpTypeFunction %4 %6
%331 = OpConstant  %5  23.0
%332 = OpConstant  %5  32.0
%333 = OpConstant  %5  -43.0
%334 = OpConstant  %5  3.0
%352 = OpTypePointer Input %19
%351 = OpVariable  %352  Input
%355 = OpTypeFunction %2
%356 = OpTypePointer Uniform %13
%358 = OpConstant  %8  6
%359 = OpConstant  %8  2
%360 = OpConstant  %8  3
%361 = OpConstant  %8  4
%364 = OpTypePointer Uniform %10
%367 = OpTypePointer Uniform %11
%371 = OpTypePointer StorageBuffer %15
%372 = OpTypePointer StorageBuffer %14
%373 = OpTypePointer Uniform %6
%380 = OpTypePointer Uniform %8
%401 = OpTypePointer StorageBuffer %17
%402 = OpTypePointer StorageBuffer %8
%416 = OpTypePointer Input %8
%415 = OpVariable  %416  Input
%419 = OpTypePointer Output %8
%418 = OpVariable  %419  Output
%421 = OpTypePointer Output %7
%420 = OpVariable  %421  Output
%423 = OpTypePointer Output %6
%422 = OpVariable  %423  Output
%425 = OpTypePointer Uniform %20
%427 = OpConstant  %5  -1.0
%444 = OpTypePointer Uniform %8
%467 = OpVariable  %416  Input
%470 = OpTypePointer Input %7
%469 = OpVariable  %470  Input
%473 = OpTypePointer Input %6
%472 = OpVariable  %473  Input
%475 = OpVariable  %419  Output
%476 = OpVariable  %419  Output
%479 = OpConstant  %5  6.0
%560 = OpTypePointer Input %4
%559 = OpVariable  %560  Input
%562 = OpVariable  %560  Input
%564 = OpVariable  %421  Output
%566 = OpTypePointer Output %4
%565 = OpVariable  %566  Output
%567 = OpVariable  %566  Output
%569 = OpTypePointer Uniform %24
%572 = OpTypePointer Uniform %23
%587 = OpVariable  %470  Input
%589 = OpVariable  %560  Input
%591 = OpVariable  %560  Input
%593 = OpVariable  %421  Output
%596 = OpTypePointer Uniform %25
%598 = OpConstant  %5  0.7
%599 = OpConstant  %5  0.2
%618 = OpTypePointer Uniform %4
%628 = OpTypePointer Uniform %7
%53 = OpFunction  %4  None %54
%52 = OpFunctionParameter  %4
%51 = OpLabel
OpBranch %58
%58 = OpLabel
OpLine %3 10 52
%60 = OpCompositeConstruct  %4  %55 %55 %55
%59 = OpVectorTimesScalar  %4  %52 %60
OpLine %3 10 50
%62 = OpCompositeConstruct  %4  %56 %56 %56
%61 = OpFAdd  %4  %59 %62
%63 = OpFMul  %4  %61 %52
OpLine %3 10 49
%64 = OpCompositeConstruct  %4  %57 %57 %57
%65 = OpFRem  %4  %63 %64
OpReturnValue %65
OpFunctionEnd
%78 = OpFunction  %5  None %79
%77 = OpFunctionParameter  %6
%76 = OpLabel
%69 = OpVariable  %67  Function %68
%73 = OpVariable  %74  Function %75
%66 = OpVariable  %67  Function %68
%70 = OpVariable  %71  Function %72
OpBranch %90
%90 = OpLabel
OpLine %3 13 13
%91 = OpCompositeConstruct  %7  %80 %81 %82 %83
OpLine %3 14 24
%92 = OpVectorShuffle  %6  %91 %91 1 1
%93 = OpDot  %5  %77 %92
%95 = OpCompositeConstruct  %6  %93 %93
%94 = OpFAdd  %6  %77 %95
%96 = OpExtInst  %6  %1 Floor %94
OpLine %3 14 5
OpStore %66 %96
OpLine %3 15 14
%97 = OpLoad  %6  %66
%98 = OpFSub  %6  %77 %97
%99 = OpLoad  %6  %66
%100 = OpVectorShuffle  %6  %91 %91 0 0
%101 = OpDot  %5  %99 %100
%103 = OpCompositeConstruct  %6  %101 %101
%102 = OpFAdd  %6  %98 %103
OpLine %3 17 32
%104 = OpCompositeConstruct  %6  %56 %84
OpLine %3 17 25
%105 = OpCompositeConstruct  %6  %84 %56
%106 = OpCompositeExtract  %5  %102 0
%107 = OpCompositeExtract  %5  %102 1
%109 = OpFOrdLessThan  %108  %106 %107
%112 = OpCompositeConstruct  %111  %109 %109
%110 = OpSelect  %6  %112 %105 %104
OpLine %3 17 5
OpStore %69 %110
OpLine %3 18 26
%113 = OpVectorShuffle  %7  %102 %102 0 1 0 1
%114 = OpVectorShuffle  %7  %91 %91 0 0 2 2
%115 = OpFAdd  %7  %113 %114
%116 = OpLoad  %6  %69
OpLine %3 18 26
%117 = OpCompositeConstruct  %7  %116 %84 %84
%118 = OpFSub  %7  %115 %117
OpLine %3 18 5
OpStore %70 %118
OpLine %3 1 1
%119 = OpLoad  %6  %66
OpLine %3 19 9
%120 = OpCompositeConstruct  %6  %57 %57
%121 = OpFRem  %6  %119 %120
OpLine %3 19 5
OpStore %66 %121
OpLine %3 20 31
%124 = OpAccessChain  %122  %66 %123
%125 = OpLoad  %5  %124
OpLine %3 20 51
%126 = OpAccessChain  %122  %69 %123
%127 = OpLoad  %5  %126
OpLine %3 20 31
%128 = OpCompositeConstruct  %4  %84 %127 %56
%130 = OpCompositeConstruct  %4  %125 %125 %125
%129 = OpFAdd  %4  %130 %128
OpLine %3 20 22
%131 = OpFunctionCall  %4  %53 %129
OpLine %3 20 22
%133 = OpAccessChain  %122  %66 %132
%134 = OpLoad  %5  %133
%136 = OpCompositeConstruct  %4  %134 %134 %134
%135 = OpFAdd  %4  %131 %136
OpLine %3 20 84
%137 = OpAccessChain  %122  %69 %132
%138 = OpLoad  %5  %137
OpLine %3 20 22
%139 = OpCompositeConstruct  %4  %84 %138 %56
%140 = OpFAdd  %4  %135 %139
OpLine %3 20 13
%141 = OpFunctionCall  %4  %53 %140
OpLine %3 21 28
%142 = OpDot  %5  %102 %102
%143 = OpLoad  %7  %70
%144 = OpVectorShuffle  %6  %143 %143 0 1
%145 = OpLoad  %7  %70
%146 = OpVectorShuffle  %6  %145 %145 0 1
%147 = OpDot  %5  %144 %146
%148 = OpLoad  %7  %70
%149 = OpVectorShuffle  %6  %148 %148 2 3
%150 = OpLoad  %7  %70
%151 = OpVectorShuffle  %6  %150 %150 2 3
%152 = OpDot  %5  %149 %151
%153 = OpCompositeConstruct  %4  %142 %147 %152
%155 = OpCompositeConstruct  %4  %85 %85 %85
%154 = OpFSub  %4  %155 %153
OpLine %3 21 24
%156 = OpCompositeConstruct  %4  %84 %84 %84
%157 = OpExtInst  %4  %1 FMax %154 %156
OpLine %3 21 5
OpStore %73 %157
OpLine %3 22 9
%158 = OpLoad  %4  %73
%159 = OpLoad  %4  %73
%160 = OpFMul  %4  %158 %159
OpLine %3 22 5
OpStore %73 %160
OpLine %3 23 9
%161 = OpLoad  %4  %73
%162 = OpLoad  %4  %73
%163 = OpFMul  %4  %161 %162
OpLine %3 23 5
OpStore %73 %163
OpLine %3 24 13
%164 = OpVectorShuffle  %4  %91 %91 3 3 3
%165 = OpFMul  %4  %141 %164
%166 = OpExtInst  %4  %1 Fract %165
%168 = OpCompositeConstruct  %4  %86 %86 %86
%167 = OpVectorTimesScalar  %4  %166 %168
OpLine %3 24 13
%170 = OpCompositeConstruct  %4  %56 %56 %56
%169 = OpFSub  %4  %167 %170
OpLine %3 25 13
%171 = OpExtInst  %4  %1 FAbs %169
OpLine %3 25 13
%173 = OpCompositeConstruct  %4  %85 %85 %85
%172 = OpFSub  %4  %171 %173
OpLine %3 26 14
%175 = OpCompositeConstruct  %4  %85 %85 %85
%174 = OpFAdd  %4  %169 %175
%176 = OpExtInst  %4  %1 Floor %174
OpLine %3 27 14
%177 = OpFSub  %4  %169 %176
OpLine %3 1 1
%178 = OpLoad  %4  %73
OpLine %3 28 9
%179 = OpFMul  %4  %177 %177
%180 = OpFMul  %4  %172 %172
%181 = OpFAdd  %4  %179 %180
%183 = OpCompositeConstruct  %4  %88 %88 %88
%182 = OpVectorTimesScalar  %4  %181 %183
%185 = OpCompositeConstruct  %4  %87 %87 %87
%184 = OpFSub  %4  %185 %182
%186 = OpFMul  %4  %178 %184
OpLine %3 28 5
OpStore %73 %186
OpLine %3 29 13
%187 = OpCompositeExtract  %5  %177 0
%188 = OpCompositeExtract  %5  %102 0
%189 = OpFMul  %5  %187 %188
%190 = OpCompositeExtract  %5  %172 0
%191 = OpCompositeExtract  %5  %102 1
%192 = OpFMul  %5  %190 %191
%193 = OpFAdd  %5  %189 %192
%194 = OpVectorShuffle  %6  %177 %177 1 2
%195 = OpLoad  %7  %70
%196 = OpVectorShuffle  %6  %195 %195 0 2
%197 = OpFMul  %6  %194 %196
%198 = OpVectorShuffle  %6  %172 %172 1 2
%199 = OpLoad  %7  %70
%200 = OpVectorShuffle  %6  %199 %199 1 3
%201 = OpFMul  %6  %198 %200
%202 = OpFAdd  %6  %197 %201
%203 = OpCompositeConstruct  %4  %193 %202
OpLine %3 30 12
%204 = OpLoad  %4  %73
%205 = OpDot  %5  %204 %203
%206 = OpFMul  %5  %89 %205
OpReturnValue %206
OpFunctionEnd
%217 = OpFunction  %5  None %79
%216 = OpFunctionParameter  %6
%215 = OpLabel
%208 = OpVariable  %209  Function %210
%212 = OpVariable  %213  Function %214
%207 = OpVariable  %67  Function %68
%211 = OpVariable  %209  Function %210
OpBranch %221
%221 = OpLabel
OpLine %3 36 13
%223 = OpCompositeConstruct  %6  %219 %219
%222 = OpVectorTimesScalar  %6  %216 %223
OpLine %3 36 5
OpStore %207 %222
OpLine %3 37 5
OpStore %208 %84
OpLine %3 38 5
OpStore %211 %85
OpLine %3 39 17
%224 = OpCompositeConstruct  %6  %220 %220
OpLine %3 40 24
%225 = OpExtInst  %5  %1 Cos %85
OpLine %3 40 14
%226 = OpExtInst  %5  %1 Sin %85
%227 = OpCompositeConstruct  %6  %225 %226
OpLine %3 41 15
%228 = OpCompositeExtract  %5  %227 0
%229 = OpCompositeExtract  %5  %227 1
%230 = OpCompositeExtract  %5  %227 1
%231 = OpFNegate  %5  %230
%232 = OpCompositeExtract  %5  %227 0
%233 = OpCompositeConstruct  %6  %228 %229
%234 = OpCompositeConstruct  %6  %231 %232
%235 = OpCompositeConstruct  %9  %233 %234
OpLine %3 43 10
OpStore %212 %132
OpBranch %236
%236 = OpLabel
OpLine %3 43 5
OpLoopMerge %237 %239 None
OpBranch %238
%238 = OpLabel
OpLine %3 43 22
%240 = OpLoad  %8  %212
%241 = OpULessThan  %108  %240 %218
OpLine %3 43 21
OpSelectionMerge %242 None
OpBranchConditional %241 %242 %243
%243 = OpLabel
OpBranch %237
%242 = OpLabel
OpBranch %244
%244 = OpLabel
OpLine %3 1 1
%246 = OpLoad  %5  %208
%247 = OpLoad  %5  %211
%248 = OpLoad  %6  %207
OpLine %3 44 21
%249 = OpFunctionCall  %5  %78 %248
OpLine %3 44 13
%250 = OpFMul  %5  %247 %249
%251 = OpFAdd  %5  %246 %250
OpLine %3 44 9
OpStore %208 %251
OpLine %3 45 13
%252 = OpLoad  %6  %207
%253 = OpMatrixTimesVector  %6  %235 %252
OpLine %3 45 13
%255 = OpCompositeConstruct  %6  %86 %86
%254 = OpVectorTimesScalar  %6  %253 %255
%256 = OpFAdd  %6  %254 %224
OpLine %3 45 9
OpStore %207 %256
OpLine %3 1 1
%257 = OpLoad  %5  %211
OpLine %3 46 13
%258 = OpFMul  %5  %257 %85
OpLine %3 46 9
OpStore %211 %258
OpBranch %245
%245 = OpLabel
OpBranch %239
%239 = OpLabel
OpLine %3 1 1
%259 = OpLoad  %8  %212
OpLine %3 43 43
%260 = OpIAdd  %8  %259 %123
OpLine %3 43 39
OpStore %212 %260
OpBranch %236
%237 = OpLabel
OpLine %3 1 1
%261 = OpLoad  %5  %208
OpReturnValue %261
OpFunctionEnd
%265 = OpFunction  %4  None %266
%263 = OpFunctionParameter  %6
%264 = OpFunctionParameter  %6
%262 = OpLabel
OpBranch %267
%267 = OpLabel
OpLine %3 77 9
%268 = OpCompositeExtract  %5  %263 0
%269 = OpCompositeExtract  %5  %264 0
%270 = OpCompositeExtract  %5  %264 1
OpLine %3 78 49
%271 = OpFunctionCall  %5  %217 %263
OpLine %3 76 12
%272 = OpExtInst  %5  %1 FMix %269 %270 %271
%273 = OpCompositeExtract  %5  %263 1
%274 = OpCompositeConstruct  %4  %268 %272 %273
OpReturnValue %274
OpFunctionEnd
%278 = OpFunction  %14  None %279
%276 = OpFunctionParameter  %6
%277 = OpFunctionParameter  %6
%275 = OpLabel
OpBranch %282
%282 = OpLabel
OpLine %3 84 13
%283 = OpFunctionCall  %4  %265 %276 %277
OpLine %3 86 29
%284 = OpCompositeConstruct  %6  %280 %84
%285 = OpFAdd  %6  %276 %284
OpLine %3 86 15
%286 = OpFunctionCall  %4  %265 %285 %277
OpLine %3 86 15
%287 = OpFSub  %4  %286 %283
OpLine %3 87 29
%288 = OpCompositeConstruct  %6  %84 %280
%289 = OpFAdd  %6  %276 %288
OpLine %3 87 15
%290 = OpFunctionCall  %4  %265 %289 %277
OpLine %3 87 15
%291 = OpFSub  %4  %290 %283
OpLine %3 88 29
%292 = OpCompositeConstruct  %6  %281 %84
%293 = OpFAdd  %6  %276 %292
OpLine %3 88 15
%294 = OpFunctionCall  %4  %265 %293 %277
OpLine %3 88 15
%295 = OpFSub  %4  %294 %283
OpLine %3 89 29
%296 = OpCompositeConstruct  %6  %84 %281
%297 = OpFAdd  %6  %276 %296
OpLine %3 89 15
%298 = OpFunctionCall  %4  %265 %297 %277
OpLine %3 89 15
%299 = OpFSub  %4  %298 %283
OpLine %3 91 14
%300 = OpExtInst  %4  %1 Cross %291 %287
%301 = OpExtInst  %4  %1 Normalize %300
OpLine %3 92 14
%302 = OpExtInst  %4  %1 Cross %299 %295
%303 = OpExtInst  %4  %1 Normalize %302
OpLine %3 94 14
%304 = OpFAdd  %4  %301 %303
OpLine %3 94 13
%306 = OpCompositeConstruct  %4  %85 %85 %85
%305 = OpVectorTimesScalar  %4  %304 %306
OpLine %3 96 12
%307 = OpCompositeConstruct  %14  %283 %305
OpReturnValue %307
OpFunctionEnd
%312 = OpFunction  %6  None %313
%309 = OpFunctionParameter  %8
%310 = OpFunctionParameter  %10
%311 = OpFunctionParameter  %11
%308 = OpLabel
OpBranch %314
%314 = OpLabel
OpLine %3 101 9
%315 = OpConvertUToF  %5  %309
%316 = OpCompositeExtract  %8  %310 0
OpLine %3 101 9
%317 = OpIAdd  %8  %316 %123
%318 = OpConvertUToF  %5  %317
%319 = OpFRem  %5  %315 %318
%320 = OpCompositeExtract  %8  %310 0
OpLine %3 100 12
%321 = OpIAdd  %8  %320 %123
%322 = OpUDiv  %8  %309 %321
%323 = OpConvertUToF  %5  %322
%324 = OpCompositeConstruct  %6  %319 %323
%325 = OpConvertSToF  %6  %311
%326 = OpFAdd  %6  %324 %325
OpReturnValue %326
OpFunctionEnd
%329 = OpFunction  %4  None %330
%328 = OpFunctionParameter  %6
%327 = OpLabel
OpBranch %335
%335 = OpLabel
OpLine %3 270 9
%336 = OpFunctionCall  %5  %78 %328
OpLine %3 270 9
%337 = OpFMul  %5  %336 %85
OpLine %3 270 9
%338 = OpFAdd  %5  %337 %85
OpLine %3 271 17
%339 = OpCompositeConstruct  %6  %331 %332
%340 = OpFAdd  %6  %328 %339
OpLine %3 271 9
%341 = OpFunctionCall  %5  %78 %340
OpLine %3 271 9
%342 = OpFMul  %5  %341 %85
OpLine %3 271 9
%343 = OpFAdd  %5  %342 %85
OpLine %3 272 17
%344 = OpCompositeConstruct  %6  %333 %334
%345 = OpFAdd  %6  %328 %344
OpLine %3 272 9
%346 = OpFunctionCall  %5  %78 %345
OpLine %3 272 9
%347 = OpFMul  %5  %346 %85
OpLine %3 269 12
%348 = OpFAdd  %5  %347 %85
%349 = OpCompositeConstruct  %4  %338 %343 %348
OpReturnValue %349
OpFunctionEnd
%354 = OpFunction  %2  None %355
%350 = OpLabel
%353 = OpLoad  %19  %351
%357 = OpAccessChain  %356  %29 %132
OpBranch %362
%362 = OpLabel
OpLine %3 111 22
%363 = OpCompositeExtract  %8  %353 0
OpLine %3 113 36
%365 = OpAccessChain  %364  %357 %132
%366 = OpLoad  %10  %365
OpLine %3 113 59
%368 = OpAccessChain  %367  %357 %123
%369 = OpLoad  %11  %368
OpLine %3 113 13
%370 = OpFunctionCall  %6  %312 %363 %366 %369
OpLine %3 115 5
OpLine %3 115 51
%374 = OpAccessChain  %373  %357 %359
%375 = OpLoad  %6  %374
OpLine %3 115 33
%376 = OpFunctionCall  %14  %278 %370 %375
OpLine %3 115 5
%377 = OpAccessChain  %372  %32 %132 %363
OpStore %377 %376
OpLine %3 118 23
%378 = OpCompositeExtract  %8  %353 0
OpLine %3 118 23
%379 = OpIMul  %8  %378 %358
OpLine %3 120 25
%381 = OpAccessChain  %380  %357 %132 %132
%382 = OpLoad  %8  %381
OpLine %3 120 25
%383 = OpAccessChain  %380  %357 %132 %123
%384 = OpLoad  %8  %383
%385 = OpIMul  %8  %382 %384
OpLine %3 120 9
%386 = OpIMul  %8  %385 %358
%387 = OpUGreaterThanEqual  %108  %379 %386
OpLine %3 120 5
OpSelectionMerge %388 None
OpBranchConditional %387 %389 %388
%389 = OpLabel
OpReturn
%388 = OpLabel
OpLine %3 122 28
%390 = OpCompositeExtract  %8  %353 0
OpLine %3 122 15
%391 = OpAccessChain  %380  %357 %132 %132
%392 = OpLoad  %8  %391
%393 = OpUDiv  %8  %390 %392
%394 = OpIAdd  %8  %363 %393
OpLine %3 123 15
%395 = OpIAdd  %8  %394 %123
OpLine %3 124 15
%396 = OpAccessChain  %380  %357 %132 %132
%397 = OpLoad  %8  %396
%398 = OpIAdd  %8  %394 %397
OpLine %3 124 15
%399 = OpIAdd  %8  %398 %123
OpLine %3 125 15
%400 = OpIAdd  %8  %399 %123
OpLine %3 127 5
OpLine %3 127 5
%403 = OpAccessChain  %402  %34 %132 %379
OpStore %403 %394
OpLine %3 128 5
OpLine %3 128 5
%404 = OpIAdd  %8  %379 %123
OpLine %3 128 5
%405 = OpAccessChain  %402  %34 %132 %404
OpStore %405 %399
OpLine %3 129 5
OpLine %3 129 5
%406 = OpIAdd  %8  %379 %359
OpLine %3 129 5
%407 = OpAccessChain  %402  %34 %132 %406
OpStore %407 %400
OpLine %3 130 5
OpLine %3 130 5
%408 = OpIAdd  %8  %379 %360
OpLine %3 130 5
%409 = OpAccessChain  %402  %34 %132 %408
OpStore %409 %394
OpLine %3 131 5
OpLine %3 131 5
%410 = OpIAdd  %8  %379 %361
OpLine %3 131 5
%411 = OpAccessChain  %402  %34 %132 %410
OpStore %411 %400
OpLine %3 132 5
OpLine %3 132 5
%412 = OpIAdd  %8  %379 %218
OpLine %3 132 5
%413 = OpAccessChain  %402  %34 %132 %412
OpStore %413 %395
OpReturn
OpFunctionEnd
%424 = OpFunction  %2  None %355
%414 = OpLabel
%417 = OpLoad  %8  %415
%426 = OpAccessChain  %425  %36 %132
OpBranch %428
%428 = OpLabel
OpLine %3 161 19
%429 = OpIAdd  %8  %417 %359
OpLine %3 161 18
%430 = OpUDiv  %8  %429 %360
OpLine %3 161 13
%431 = OpUMod  %8  %430 %359
%432 = OpConvertUToF  %5  %431
OpLine %3 162 19
%433 = OpIAdd  %8  %417 %123
OpLine %3 162 18
%434 = OpUDiv  %8  %433 %360
OpLine %3 162 13
%435 = OpUMod  %8  %434 %359
%436 = OpConvertUToF  %5  %435
OpLine %3 163 14
%437 = OpCompositeConstruct  %6  %432 %436
OpLine %3 165 30
%439 = OpCompositeConstruct  %6  %86 %86
%438 = OpVectorTimesScalar  %6  %437 %439
%441 = OpCompositeConstruct  %6  %427 %427
%440 = OpFAdd  %6  %441 %438
OpLine %3 165 20
%442 = OpCompositeConstruct  %7  %440 %84 %56
OpLine %3 168 21
%443 = OpCompositeExtract  %5  %437 0
OpLine %3 168 21
%445 = OpAccessChain  %444  %426 %360
%446 = OpLoad  %8  %445
%447 = OpConvertUToF  %5  %446
%448 = OpFMul  %5  %443 %447
%449 = OpCompositeExtract  %5  %437 1
OpLine %3 168 17
%450 = OpAccessChain  %444  %426 %360
%451 = OpLoad  %8  %450
%452 = OpConvertUToF  %5  %451
%453 = OpFMul  %5  %449 %452
%454 = OpFAdd  %5  %448 %453
%455 = OpConvertFToU  %8  %454
OpLine %3 168 17
%456 = OpAccessChain  %444  %426 %361
%457 = OpLoad  %8  %456
%458 = OpIAdd  %8  %455 %457
OpLine %3 170 12
%459 = OpCompositeConstruct  %21  %458 %442 %437
%460 = OpCompositeExtract  %8  %459 0
OpStore %418 %460
%461 = OpCompositeExtract  %7  %459 1
OpStore %420 %461
%462 = OpCompositeExtract  %6  %459 2
OpStore %422 %462
OpReturn
OpFunctionEnd
%477 = OpFunction  %2  None %355
%465 = OpLabel
%463 = OpVariable  %209  Function %210
%464 = OpVariable  %213  Function %214
%468 = OpLoad  %8  %467
%471 = OpLoad  %7  %469
%474 = OpLoad  %6  %472
%466 = OpCompositeConstruct  %21  %468 %471 %474
%478 = OpAccessChain  %425  %36 %132
OpBranch %480
%480 = OpLabel
OpLine %3 181 17
%481 = OpCompositeExtract  %6  %466 2
%482 = OpCompositeExtract  %5  %481 0
OpLine %3 181 17
%483 = OpAccessChain  %444  %478 %360
%484 = OpLoad  %8  %483
%485 = OpConvertUToF  %5  %484
%486 = OpFMul  %5  %482 %485
%487 = OpCompositeExtract  %6  %466 2
%488 = OpCompositeExtract  %5  %487 1
OpLine %3 181 70
%489 = OpAccessChain  %444  %478 %360
%490 = OpLoad  %8  %489
OpLine %3 181 13
%491 = OpAccessChain  %444  %478 %360
%492 = OpLoad  %8  %491
%493 = OpIMul  %8  %490 %492
%494 = OpConvertUToF  %5  %493
%495 = OpFMul  %5  %488 %494
%496 = OpFAdd  %5  %486 %495
%497 = OpConvertFToU  %8  %496
OpLine %3 181 13
%498 = OpAccessChain  %444  %478 %361
%499 = OpLoad  %8  %498
%500 = OpIAdd  %8  %497 %499
OpLine %3 182 32
%501 = OpConvertUToF  %5  %500
OpLine %3 182 22
%502 = OpFDiv  %5  %501 %479
%503 = OpExtInst  %5  %1 Floor %502
%504 = OpConvertFToU  %8  %503
OpLine %3 183 22
%505 = OpUMod  %8  %500 %358
OpLine %3 185 36
%506 = OpAccessChain  %364  %478 %132
%507 = OpLoad  %10  %506
OpLine %3 185 57
%508 = OpAccessChain  %367  %478 %123
%509 = OpLoad  %11  %508
OpLine %3 185 13
%510 = OpFunctionCall  %6  %312 %504 %507 %509
OpLine %3 186 31
%511 = OpAccessChain  %373  %478 %359
%512 = OpLoad  %6  %511
OpLine %3 186 13
%513 = OpFunctionCall  %14  %278 %510 %512
OpLine %3 188 5
OpStore %463 %84
OpLine %3 190 5
OpSelectionMerge %514 None
OpSwitch %505 %521 0 %515 1 %516 2 %517 3 %518 4 %519 5 %520
%515 = OpLabel
OpLine %3 191 37
%522 = OpCompositeExtract  %4  %513 0
%523 = OpCompositeExtract  %5  %522 0
OpLine %3 191 20
OpStore %463 %523
OpBranch %514
%516 = OpLabel
OpLine %3 192 37
%524 = OpCompositeExtract  %4  %513 0
%525 = OpCompositeExtract  %5  %524 1
OpLine %3 192 20
OpStore %463 %525
OpBranch %514
%517 = OpLabel
OpLine %3 193 37
%526 = OpCompositeExtract  %4  %513 0
%527 = OpCompositeExtract  %5  %526 2
OpLine %3 193 20
OpStore %463 %527
OpBranch %514
%518 = OpLabel
OpLine %3 194 37
%528 = OpCompositeExtract  %4  %513 1
%529 = OpCompositeExtract  %5  %528 0
OpLine %3 194 20
OpStore %463 %529
OpBranch %514
%519 = OpLabel
OpLine %3 195 37
%530 = OpCompositeExtract  %4  %513 1
%531 = OpCompositeExtract  %5  %530 1
OpLine %3 195 20
OpStore %463 %531
OpBranch %514
%520 = OpLabel
OpLine %3 196 37
%532 = OpCompositeExtract  %4  %513 1
%533 = OpCompositeExtract  %5  %532 2
OpLine %3 196 20
OpStore %463 %533
OpBranch %514
%521 = OpLabel
OpBranch %514
%514 = OpLabel
OpLine %3 200 15
%534 = OpAccessChain  %380  %478 %132 %132
%535 = OpLoad  %8  %534
%536 = OpUDiv  %8  %504 %535
%537 = OpIAdd  %8  %504 %536
OpLine %3 201 15
%538 = OpIAdd  %8  %537 %123
OpLine %3 202 15
%539 = OpAccessChain  %380  %478 %132 %132
%540 = OpLoad  %8  %539
%541 = OpIAdd  %8  %537 %540
OpLine %3 202 15
%542 = OpIAdd  %8  %541 %123
OpLine %3 203 15
%543 = OpIAdd  %8  %542 %123
OpLine %3 205 5
OpStore %464 %132
OpLine %3 206 5
OpSelectionMerge %544 None
OpSwitch %505 %549 0 %545 3 %545 2 %546 4 %546 1 %547 5 %548
%545 = OpLabel
OpLine %3 207 24
OpStore %464 %537
OpBranch %544
%546 = OpLabel
OpLine %3 208 24
OpStore %464 %543
OpBranch %544
%547 = OpLabel
OpLine %3 209 20
OpStore %464 %542
OpBranch %544
%548 = OpLabel
OpLine %3 210 20
OpStore %464 %538
OpBranch %544
%549 = OpLabel
OpBranch %544
%544 = OpLabel
OpLine %3 213 13
%550 = OpCompositeExtract  %8  %466 0
OpLine %3 213 5
OpStore %464 %550
OpLine %3 222 27
%551 = OpLoad  %5  %463
%552 = OpBitcast  %8  %551
OpLine %3 223 12
%553 = OpLoad  %8  %464
%554 = OpCompositeConstruct  %22  %552 %553
%555 = OpCompositeExtract  %8  %554 0
OpStore %475 %555
%556 = OpCompositeExtract  %8  %554 1
OpStore %476 %556
OpReturn
OpFunctionEnd
%568 = OpFunction  %2  None %355
%557 = OpLabel
%561 = OpLoad  %4  %559
%563 = OpLoad  %4  %562
%558 = OpCompositeConstruct  %14  %561 %563
%570 = OpAccessChain  %569  %39 %132
OpBranch %571
%571 = OpLabel
OpLine %3 254 25
%573 = OpAccessChain  %572  %570 %123
%574 = OpLoad  %23  %573
%575 = OpCompositeExtract  %4  %558 0
OpLine %3 254 25
%576 = OpCompositeConstruct  %7  %575 %56
%577 = OpMatrixTimesVector  %7  %574 %576
OpLine %3 255 18
%578 = OpCompositeExtract  %4  %558 1
OpLine %3 256 12
%579 = OpCompositeExtract  %4  %558 0
%580 = OpCompositeConstruct  %26  %577 %578 %579
%581 = OpCompositeExtract  %7  %580 0
OpStore %564 %581
%582 = OpCompositeExtract  %4  %580 1
OpStore %565 %582
%583 = OpCompositeExtract  %4  %580 2
OpStore %567 %583
OpReturn
OpFunctionEnd
%594 = OpFunction  %2  None %355
%585 = OpLabel
%584 = OpVariable  %74  Function %75
%588 = OpLoad  %7  %587
%590 = OpLoad  %4  %589
%592 = OpLoad  %4  %591
%586 = OpCompositeConstruct  %26  %588 %590 %592
%595 = OpAccessChain  %569  %39 %132
%597 = OpAccessChain  %596  %42 %132
OpBranch %600
%600 = OpLabel
OpLine %3 278 28
%601 = OpCompositeConstruct  %4  %84 %84 %84
OpLine %3 278 17
%602 = OpCompositeConstruct  %4  %280 %280 %280
%603 = OpCompositeExtract  %4  %586 2
%604 = OpExtInst  %4  %1 Fract %603
%605 = OpExtInst  %4  %1 SmoothStep %601 %602 %604
OpLine %3 278 5
OpStore %584 %605
OpLine %3 279 17
%606 = OpCompositeConstruct  %4  %85 %280 %598
OpLine %3 279 13
%607 = OpCompositeConstruct  %4  %599 %599 %599
%608 = OpAccessChain  %122  %584 %132
%609 = OpLoad  %5  %608
%610 = OpAccessChain  %122  %584 %123
%611 = OpLoad  %5  %610
%612 = OpFMul  %5  %609 %611
%613 = OpAccessChain  %122  %584 %359
%614 = OpLoad  %5  %613
%615 = OpFMul  %5  %612 %614
%616 = OpCompositeConstruct  %4  %615 %615 %615
%617 = OpExtInst  %4  %1 FMix %606 %607 %616
OpLine %3 279 5
OpStore %584 %617
OpLine %3 282 25
%619 = OpAccessChain  %618  %597 %123
%620 = OpLoad  %4  %619
%622 = OpCompositeConstruct  %4  %280 %280 %280
%621 = OpVectorTimesScalar  %4  %620 %622
OpLine %3 284 21
%623 = OpAccessChain  %618  %597 %132
%624 = OpLoad  %4  %623
%625 = OpCompositeExtract  %4  %586 2
%626 = OpFSub  %4  %624 %625
%627 = OpExtInst  %4  %1 Normalize %626
OpLine %3 285 20
%629 = OpAccessChain  %628  %595 %132
%630 = OpLoad  %7  %629
%631 = OpVectorShuffle  %4  %630 %630 0 1 2
%632 = OpCompositeExtract  %4  %586 2
%633 = OpFSub  %4  %631 %632
%634 = OpExtInst  %4  %1 Normalize %633
OpLine %3 286 20
%635 = OpFAdd  %4  %634 %627
%636 = OpExtInst  %4  %1 Normalize %635
OpLine %3 288 32
%637 = OpCompositeExtract  %4  %586 1
%638 = OpDot  %5  %637 %627
OpLine %3 288 28
%639 = OpExtInst  %5  %1 FMax %638 %84
OpLine %3 289 25
%640 = OpAccessChain  %618  %597 %123
%641 = OpLoad  %4  %640
%643 = OpCompositeConstruct  %4  %639 %639 %639
%642 = OpVectorTimesScalar  %4  %641 %643
OpLine %3 291 37
%644 = OpCompositeExtract  %4  %586 1
%645 = OpDot  %5  %644 %636
OpLine %3 291 33
%646 = OpExtInst  %5  %1 FMax %645 %84
OpLine %3 291 29
%647 = OpExtInst  %5  %1 Pow %646 %332
OpLine %3 292 26
%648 = OpAccessChain  %618  %597 %123
%649 = OpLoad  %4  %648
%651 = OpCompositeConstruct  %4  %647 %647 %647
%650 = OpVectorTimesScalar  %4  %649 %651
OpLine %3 294 18
%652 = OpFAdd  %4  %621 %642
%653 = OpFAdd  %4  %652 %650
%654 = OpLoad  %4  %584
%655 = OpFMul  %4  %653 %654
OpLine %3 296 12
%656 = OpCompositeConstruct  %7  %655 %56
OpStore %593 %656
OpReturn
OpFunctionEnd