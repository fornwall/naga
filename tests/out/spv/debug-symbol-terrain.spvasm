; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 636
OpCapability Shader
OpExtension "SPV_KHR_storage_buffer_storage_class"
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %338 "gen_terrain_compute" %335
OpEntryPoint Vertex %408 "gen_terrain_vertex" %399 %402 %404 %406
OpEntryPoint Fragment %459 "gen_terrain_fragment" %449 %451 %454 %457 %458
OpEntryPoint Vertex %550 "vs_main" %541 %544 %546 %547 %549
OpEntryPoint Fragment %576 "fs_main" %569 %571 %573 %575
OpExecutionMode %338 LocalSize 64 1 1
OpExecutionMode %459 OriginUpperLeft
OpExecutionMode %576 OriginUpperLeft
%3 = OpString "debug-symbol-terrain"
OpSource Unknown 0 %3 "// Taken from https://github.com/sotrh/learn-wgpu/blob/11820796f5e1dbce42fb1119f04ddeb4b167d2a0/code/intermediate/tutorial13-terrain/src/terrain.wgsl
// ============================
// Terrain Generation
// ============================

// https://gist.github.com/munrocket/236ed5ba7e409b8bdf1ff6eca5dcdc39
//  MIT License. Â© Ian McEwan, Stefan Gustavson, Munrocket
// - Less condensed glsl implementation with comments can be found at https://weber.itn.liu.se/~stegu/jgt2012/article.pdf

fn permute3(x: vec3<f32>) -> vec3<f32> { return (((x * 34.) + 1.) * x) % vec3<f32>(289.); }

fn snoise2(v: vec2<f32>) -> f32 {
    let C = vec4<f32>(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    var i: vec2<f32> = floor(v + dot(v, C.yy));
    let x0 = v - i + dot(i, C.xx);
    // I flipped the condition here from > to < as it fixed some artifacting I was observing
    var i1: vec2<f32> = select(vec2<f32>(1., 0.), vec2<f32>(0., 1.), (x0.x < x0.y));
    var x12: vec4<f32> = x0.xyxy + C.xxzz - vec4<f32>(i1, 0., 0.);
    i = i % vec2<f32>(289.);
    let p = permute3(permute3(i.y + vec3<f32>(0., i1.y, 1.)) + i.x + vec3<f32>(0., i1.x, 1.));
    var m: vec3<f32> = max(0.5 - vec3<f32>(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), vec3<f32>(0.));
    m = m * m;
    m = m * m;
    let x = 2. * fract(p * C.www) - 1.;
    let h = abs(x) - 0.5;
    let ox = floor(x + 0.5);
    let a0 = x - ox;
    m = m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h));
    let g = vec3<f32>(a0.x * x0.x + h.x * x0.y, a0.yz * x12.xz + h.yz * x12.yw);
    return 130. * dot(m, g);
}


fn fbm(p: vec2<f32>) -> f32 {
    let NUM_OCTAVES: u32 = 5u;
    var x = p * 0.01;
    var v = 0.0;
    var a = 0.5;
    let shift = vec2<f32>(100.0);
    let cs = vec2<f32>(cos(0.5), sin(0.5));
    let rot = mat2x2<f32>(cs.x, cs.y, -cs.y, cs.x);

    for (var i = 0u; i < NUM_OCTAVES; i = i + 1u) {
        v = v + a * snoise2(x);
        x = rot * x * 2.0 + shift;
        a = a * 0.5;
    }

    return v;
}

struct ChunkData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
}

struct Vertex {
    @location(0) position: vec3<f32>,
    @location(1) normal: vec3<f32>,
}

struct VertexBuffer {
    data: array<Vertex>, // stride: 32
}

struct IndexBuffer {
    data: array<u32>,
}

@group(0) @binding(0) var<uniform> chunk_data: ChunkData;
@group(0) @binding(1) var<storage, read_write> vertices: VertexBuffer;
@group(0) @binding(2) var<storage, read_write> indices: IndexBuffer;

fn terrain_point(p: vec2<f32>, min_max_height: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        p.x,
        mix(min_max_height.x, min_max_height.y, fbm(p)),
        p.y,
    );
}

fn terrain_vertex(p: vec2<f32>, min_max_height: vec2<f32>) -> Vertex {
    let v = terrain_point(p, min_max_height);

    let tpx = terrain_point(p + vec2<f32>(0.1, 0.0), min_max_height) - v;
    let tpz = terrain_point(p + vec2<f32>(0.0, 0.1), min_max_height) - v;
    let tnx = terrain_point(p + vec2<f32>(-0.1, 0.0), min_max_height) - v;
    let tnz = terrain_point(p + vec2<f32>(0.0, -0.1), min_max_height) - v;

    let pn = normalize(cross(tpz, tpx));
    let nn = normalize(cross(tnz, tnx));

    let n = (pn + nn) * 0.5;

    return Vertex(v, n);
}

fn index_to_p(vert_index: u32, chunk_size: vec2<u32>, chunk_corner: vec2<i32>) -> vec2<f32> {
    return vec2(
        f32(vert_index) % f32(chunk_size.x + 1u),
        f32(vert_index / (chunk_size.x + 1u)),
    ) + vec2<f32>(chunk_corner);
}

@compute @workgroup_size(64)
fn gen_terrain_compute(
    @builtin(global_invocation_id) gid: vec3<u32>
) {
    // Create vert_component
    let vert_index = gid.x;

    let p = index_to_p(vert_index, chunk_data.chunk_size, chunk_data.chunk_corner);

    vertices.data[vert_index] = terrain_vertex(p, chunk_data.min_max_height);

    // Create indices
    let start_index = gid.x * 6u; // using TriangleList

    if (start_index >= (chunk_data.chunk_size.x * chunk_data.chunk_size.y * 6u)) { return; }

    let v00 = vert_index + gid.x / chunk_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + chunk_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    indices.data[start_index] = v00;
    indices.data[start_index + 1u] = v01;
    indices.data[start_index + 2u] = v11;
    indices.data[start_index + 3u] = v00;
    indices.data[start_index + 4u] = v11;
    indices.data[start_index + 5u] = v10;
}

// ============================
// Terrain Gen (Fragment Shader)
// ============================

struct GenData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
    texture_size: u32,
    start_index: u32,
}
@group(0)
@binding(0)
var<uniform> gen_data: GenData;

struct GenVertexOutput {
    @location(0)
    index: u32,
    @builtin(position)
    position: vec4<f32>,
    @location(1)
    uv: vec2<f32>,
};

@vertex
fn gen_terrain_vertex(@builtin(vertex_index) vindex: u32) -> GenVertexOutput {
    let u = f32(((vindex + 2u) / 3u) % 2u);
    let v = f32(((vindex + 1u) / 3u) % 2u);
    let uv = vec2<f32>(u, v);

    let position = vec4<f32>(-1.0 + uv * 2.0, 0.0, 1.0);

    // TODO: maybe replace this with u32(dot(uv, vec2(f32(gen_data.texture_dim.x))))
    let index = u32(uv.x * f32(gen_data.texture_size) + uv.y * f32(gen_data.texture_size)) + gen_data.start_index;

    return GenVertexOutput(index, position, uv);
}


struct GenFragmentOutput {
    @location(0) vert_component: u32,
    @location(1) index: u32,
}

@fragment
fn gen_terrain_fragment(in: GenVertexOutput) -> GenFragmentOutput {
    let i = u32(in.uv.x * f32(gen_data.texture_size) + in.uv.y * f32(gen_data.texture_size * gen_data.texture_size)) + gen_data.start_index;
    let vert_index = u32(floor(f32(i) / 6.));
    let comp_index = i % 6u;

    let p = index_to_p(vert_index, gen_data.chunk_size, gen_data.chunk_corner);
    let v = terrain_vertex(p, gen_data.min_max_height);

    var vert_component: f32 = 0.;
    
    switch comp_index {
        case 0u: { vert_component = v.position.x; }
        case 1u: { vert_component = v.position.y; }
        case 2u: { vert_component = v.position.z; }
        case 3u: { vert_component = v.normal.x; }
        case 4u: { vert_component = v.normal.y; }
        case 5u: { vert_component = v.normal.z; }
        default: {}
    }

    let v00 = vert_index + vert_index / gen_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + gen_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    var index = 0u;
    switch comp_index {
        case 0u, 3u: { index = v00; }
        case 2u, 4u: { index = v11; }
        case 1u: { index = v01; }
        case 5u: { index = v10; }
        default: {}
    }
    index = in.index;
    // index = gen_data.start_index;
    // indices.data[start_index] = v00;
    // indices.data[start_index + 1u] = v01;
    // indices.data[start_index + 2u] = v11;
    // indices.data[start_index + 3u] = v00;
    // indices.data[start_index + 4u] = v11;
    // indices.data[start_index + 5u] = v10;

    let ivert_component = bitcast<u32>(vert_component);
    return GenFragmentOutput(ivert_component, index);
}

// ============================
// Terrain Rendering
// ============================

struct Camera {
    view_pos: vec4<f32>,
    view_proj: mat4x4<f32>,
}
@group(0) @binding(0)
var<uniform> camera: Camera;

struct Light {
    position: vec3<f32>,
    color: vec3<f32>,
}
@group(1) @binding(0)
var<uniform> light: Light;

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) normal: vec3<f32>,
    @location(1) world_pos: vec3<f32>,
}

@vertex
fn vs_main(
    vertex: Vertex,
) -> VertexOutput {
    let clip_position = camera.view_proj * vec4<f32>(vertex.position, 1.);
    let normal = vertex.normal;
    return VertexOutput(clip_position, normal, vertex.position);
}

@group(2) @binding(0)
var t_diffuse: texture_2d<f32>;
@group(2) @binding(1)
var s_diffuse: sampler;
@group(2) @binding(2)
var t_normal: texture_2d<f32>;
@group(2) @binding(3)
var s_normal: sampler;

fn color23(p: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        snoise2(p) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(23., 32.)) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(-43., 3.)) * 0.5 + 0.5,
    );
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    var color = smoothstep(vec3<f32>(0.0), vec3<f32>(0.1), fract(in.world_pos));
    color = mix(vec3<f32>(0.5, 0.1, 0.7), vec3<f32>(0.2, 0.2, 0.2), vec3<f32>(color.x * color.y * color.z));

    let ambient_strength = 0.1;
    let ambient_color = light.color * ambient_strength;

    let light_dir = normalize(light.position - in.world_pos);
    let view_dir = normalize(camera.view_pos.xyz - in.world_pos);
    let half_dir = normalize(view_dir + light_dir);

    let diffuse_strength = max(dot(in.normal, light_dir), 0.0);
    let diffuse_color = diffuse_strength * light.color;

    let specular_strength = pow(max(dot(in.normal, half_dir), 0.0), 32.0);
    let specular_color = specular_strength * light.color;

    let result = (ambient_color + diffuse_color + specular_color) * color;

    return vec4<f32>(result, 1.0);
}"
OpMemberName %13 0 "chunk_size"
OpMemberName %13 1 "chunk_corner"
OpMemberName %13 2 "min_max_height"
OpName %13 "ChunkData"
OpMemberName %14 0 "position"
OpMemberName %14 1 "normal"
OpName %14 "Vertex"
OpMemberName %16 0 "data"
OpName %16 "VertexBuffer"
OpMemberName %18 0 "data"
OpName %18 "IndexBuffer"
OpMemberName %20 0 "chunk_size"
OpMemberName %20 1 "chunk_corner"
OpMemberName %20 2 "min_max_height"
OpMemberName %20 3 "texture_size"
OpMemberName %20 4 "start_index"
OpName %20 "GenData"
OpMemberName %21 0 "index"
OpMemberName %21 1 "position"
OpMemberName %21 2 "uv"
OpName %21 "GenVertexOutput"
OpMemberName %22 0 "vert_component"
OpMemberName %22 1 "index"
OpName %22 "GenFragmentOutput"
OpMemberName %24 0 "view_pos"
OpMemberName %24 1 "view_proj"
OpName %24 "Camera"
OpMemberName %25 0 "position"
OpMemberName %25 1 "color"
OpName %25 "Light"
OpMemberName %26 0 "clip_position"
OpMemberName %26 1 "normal"
OpMemberName %26 2 "world_pos"
OpName %26 "VertexOutput"
OpName %29 "chunk_data"
OpName %32 "vertices"
OpName %34 "indices"
OpName %36 "gen_data"
OpName %39 "camera"
OpName %42 "light"
OpName %45 "t_diffuse"
OpName %47 "s_diffuse"
OpName %49 "t_normal"
OpName %50 "s_normal"
OpName %52 "x"
OpName %53 "permute3"
OpName %64 "i"
OpName %67 "i1"
OpName %68 "x12"
OpName %71 "m"
OpName %75 "v"
OpName %76 "snoise2"
OpName %194 "x"
OpName %195 "v"
OpName %198 "a"
OpName %199 "i"
OpName %203 "p"
OpName %204 "fbm"
OpName %248 "p"
OpName %249 "min_max_height"
OpName %250 "terrain_point"
OpName %261 "p"
OpName %262 "min_max_height"
OpName %263 "terrain_vertex"
OpName %293 "vert_index"
OpName %294 "chunk_size"
OpName %295 "chunk_corner"
OpName %296 "index_to_p"
OpName %312 "p"
OpName %313 "color23"
OpName %335 "gid"
OpName %338 "gen_terrain_compute"
OpName %399 "vindex"
OpName %402 "index"
OpName %404 "position"
OpName %406 "uv"
OpName %408 "gen_terrain_vertex"
OpName %445 "vert_component"
OpName %446 "index"
OpName %449 "index"
OpName %451 "position"
OpName %454 "uv"
OpName %457 "vert_component"
OpName %458 "index"
OpName %459 "gen_terrain_fragment"
OpName %541 "position"
OpName %544 "normal"
OpName %546 "clip_position"
OpName %547 "normal"
OpName %549 "world_pos"
OpName %550 "vs_main"
OpName %566 "color"
OpName %569 "clip_position"
OpName %571 "normal"
OpName %573 "world_pos"
OpName %576 "fs_main"
OpMemberDecorate %13 0 Offset 0
OpMemberDecorate %13 1 Offset 8
OpMemberDecorate %13 2 Offset 16
OpMemberDecorate %14 0 Offset 0
OpMemberDecorate %14 1 Offset 16
OpDecorate %15 ArrayStride 32
OpMemberDecorate %16 0 Offset 0
OpDecorate %17 ArrayStride 4
OpMemberDecorate %18 0 Offset 0
OpMemberDecorate %20 0 Offset 0
OpMemberDecorate %20 1 Offset 8
OpMemberDecorate %20 2 Offset 16
OpMemberDecorate %20 3 Offset 24
OpMemberDecorate %20 4 Offset 28
OpMemberDecorate %21 0 Offset 0
OpMemberDecorate %21 1 Offset 16
OpMemberDecorate %21 2 Offset 32
OpMemberDecorate %22 0 Offset 0
OpMemberDecorate %22 1 Offset 4
OpMemberDecorate %24 0 Offset 0
OpMemberDecorate %24 1 Offset 16
OpMemberDecorate %24 1 ColMajor
OpMemberDecorate %24 1 MatrixStride 16
OpMemberDecorate %25 0 Offset 0
OpMemberDecorate %25 1 Offset 16
OpMemberDecorate %26 0 Offset 0
OpMemberDecorate %26 1 Offset 16
OpMemberDecorate %26 2 Offset 32
OpDecorate %29 DescriptorSet 0
OpDecorate %29 Binding 0
OpDecorate %30 Block
OpMemberDecorate %30 0 Offset 0
OpDecorate %32 DescriptorSet 0
OpDecorate %32 Binding 1
OpDecorate %16 Block
OpDecorate %34 DescriptorSet 0
OpDecorate %34 Binding 2
OpDecorate %18 Block
OpDecorate %36 DescriptorSet 0
OpDecorate %36 Binding 0
OpDecorate %37 Block
OpMemberDecorate %37 0 Offset 0
OpDecorate %39 DescriptorSet 0
OpDecorate %39 Binding 0
OpDecorate %40 Block
OpMemberDecorate %40 0 Offset 0
OpDecorate %42 DescriptorSet 1
OpDecorate %42 Binding 0
OpDecorate %43 Block
OpMemberDecorate %43 0 Offset 0
OpDecorate %45 DescriptorSet 2
OpDecorate %45 Binding 0
OpDecorate %47 DescriptorSet 2
OpDecorate %47 Binding 1
OpDecorate %49 DescriptorSet 2
OpDecorate %49 Binding 2
OpDecorate %50 DescriptorSet 2
OpDecorate %50 Binding 3
OpDecorate %335 BuiltIn GlobalInvocationId
OpDecorate %399 BuiltIn VertexIndex
OpDecorate %402 Location 0
OpDecorate %402 Flat
OpDecorate %404 BuiltIn Position
OpDecorate %406 Location 1
OpDecorate %449 Location 0
OpDecorate %449 Flat
OpDecorate %451 BuiltIn FragCoord
OpDecorate %454 Location 1
OpDecorate %457 Location 0
OpDecorate %458 Location 1
OpDecorate %541 Location 0
OpDecorate %544 Location 1
OpDecorate %546 BuiltIn Position
OpDecorate %547 Location 0
OpDecorate %549 Location 1
OpDecorate %569 BuiltIn FragCoord
OpDecorate %571 Location 0
OpDecorate %573 Location 1
OpDecorate %575 Location 0
%2 = OpTypeVoid
%5 = OpTypeFloat 32
%4 = OpTypeVector %5 3
%6 = OpTypeVector %5 2
%7 = OpTypeVector %5 4
%8 = OpTypeInt 32 0
%9 = OpTypeMatrix %6 2
%10 = OpTypeVector %8 2
%12 = OpTypeInt 32 1
%11 = OpTypeVector %12 2
%13 = OpTypeStruct %10 %11 %6
%14 = OpTypeStruct %4 %4
%15 = OpTypeRuntimeArray %14
%16 = OpTypeStruct %15
%17 = OpTypeRuntimeArray %8
%18 = OpTypeStruct %17
%19 = OpTypeVector %8 3
%20 = OpTypeStruct %10 %11 %6 %8 %8
%21 = OpTypeStruct %8 %7 %6
%22 = OpTypeStruct %8 %8
%23 = OpTypeMatrix %7 4
%24 = OpTypeStruct %7 %23
%25 = OpTypeStruct %4 %4
%26 = OpTypeStruct %7 %4 %4
%27 = OpTypeImage %5 2D 0 0 0 1 Unknown
%28 = OpTypeSampler
%30 = OpTypeStruct %13
%31 = OpTypePointer Uniform %30
%29 = OpVariable  %31  Uniform
%33 = OpTypePointer StorageBuffer %16
%32 = OpVariable  %33  StorageBuffer
%35 = OpTypePointer StorageBuffer %18
%34 = OpVariable  %35  StorageBuffer
%37 = OpTypeStruct %20
%38 = OpTypePointer Uniform %37
%36 = OpVariable  %38  Uniform
%40 = OpTypeStruct %24
%41 = OpTypePointer Uniform %40
%39 = OpVariable  %41  Uniform
%43 = OpTypeStruct %25
%44 = OpTypePointer Uniform %43
%42 = OpVariable  %44  Uniform
%46 = OpTypePointer UniformConstant %27
%45 = OpVariable  %46  UniformConstant
%48 = OpTypePointer UniformConstant %28
%47 = OpVariable  %48  UniformConstant
%49 = OpVariable  %46  UniformConstant
%50 = OpVariable  %48  UniformConstant
%54 = OpTypeFunction %4 %4
%55 = OpConstant  %5  34.0
%56 = OpConstant  %5  1.0
%57 = OpConstant  %5  289.0
%65 = OpTypePointer Function %6
%66 = OpConstantNull  %6
%69 = OpTypePointer Function %7
%70 = OpConstantNull  %7
%72 = OpTypePointer Function %4
%73 = OpConstantNull  %4
%77 = OpTypeFunction %5 %6
%78 = OpConstant  %5  0.21132487
%79 = OpConstant  %5  0.36602542
%80 = OpConstant  %5  -0.57735026
%81 = OpConstant  %5  0.024390243
%82 = OpConstant  %5  0.0
%83 = OpConstant  %5  0.5
%84 = OpConstant  %5  2.0
%85 = OpConstant  %5  1.7928429
%86 = OpConstant  %5  0.85373473
%87 = OpConstant  %5  130.0
%104 = OpTypeBool
%107 = OpTypeVector %104 2
%118 = OpTypePointer Function %5
%119 = OpConstant  %8  1
%127 = OpConstant  %8  0
%196 = OpTypePointer Function %5
%197 = OpConstantNull  %5
%200 = OpTypePointer Function %8
%201 = OpConstantNull  %8
%205 = OpConstant  %8  5
%206 = OpConstant  %5  0.01
%207 = OpConstant  %5  100.0
%251 = OpTypeFunction %4 %6 %6
%264 = OpTypeFunction %14 %6 %6
%265 = OpConstant  %5  0.1
%266 = OpConstant  %5  -0.1
%297 = OpTypeFunction %6 %8 %10 %11
%314 = OpTypeFunction %4 %6
%315 = OpConstant  %5  23.0
%316 = OpConstant  %5  32.0
%317 = OpConstant  %5  -43.0
%318 = OpConstant  %5  3.0
%336 = OpTypePointer Input %19
%335 = OpVariable  %336  Input
%339 = OpTypeFunction %2
%340 = OpTypePointer Uniform %13
%342 = OpConstant  %8  6
%343 = OpConstant  %8  2
%344 = OpConstant  %8  3
%345 = OpConstant  %8  4
%348 = OpTypePointer Uniform %10
%351 = OpTypePointer Uniform %11
%355 = OpTypePointer StorageBuffer %15
%356 = OpTypePointer StorageBuffer %14
%357 = OpTypePointer Uniform %6
%364 = OpTypePointer Uniform %8
%385 = OpTypePointer StorageBuffer %17
%386 = OpTypePointer StorageBuffer %8
%400 = OpTypePointer Input %8
%399 = OpVariable  %400  Input
%403 = OpTypePointer Output %8
%402 = OpVariable  %403  Output
%405 = OpTypePointer Output %7
%404 = OpVariable  %405  Output
%407 = OpTypePointer Output %6
%406 = OpVariable  %407  Output
%409 = OpTypePointer Uniform %20
%411 = OpConstant  %5  -1.0
%426 = OpTypePointer Uniform %8
%449 = OpVariable  %400  Input
%452 = OpTypePointer Input %7
%451 = OpVariable  %452  Input
%455 = OpTypePointer Input %6
%454 = OpVariable  %455  Input
%457 = OpVariable  %403  Output
%458 = OpVariable  %403  Output
%461 = OpConstant  %5  6.0
%542 = OpTypePointer Input %4
%541 = OpVariable  %542  Input
%544 = OpVariable  %542  Input
%546 = OpVariable  %405  Output
%548 = OpTypePointer Output %4
%547 = OpVariable  %548  Output
%549 = OpVariable  %548  Output
%551 = OpTypePointer Uniform %24
%554 = OpTypePointer Uniform %23
%569 = OpVariable  %452  Input
%571 = OpVariable  %542  Input
%573 = OpVariable  %542  Input
%575 = OpVariable  %405  Output
%578 = OpTypePointer Uniform %25
%580 = OpConstant  %5  0.7
%581 = OpConstant  %5  0.2
%600 = OpTypePointer Uniform %4
%609 = OpTypePointer Uniform %7
%53 = OpFunction  %4  None %54
%52 = OpFunctionParameter  %4
%51 = OpLabel
OpBranch %58
%58 = OpLabel
OpLine %3 10 52
%59 = OpVectorTimesScalar  %4  %52 %55
OpLine %3 10 50
%60 = OpFAdd  %4  %59 %56
%61 = OpFMul  %4  %60 %52
OpLine %3 10 49
%62 = OpCompositeConstruct  %4  %57 %57 %57
%63 = OpFRem  %4  %61 %62
OpReturnValue %63
OpFunctionEnd
%76 = OpFunction  %5  None %77
%75 = OpFunctionParameter  %6
%74 = OpLabel
%67 = OpVariable  %65  Function %66
%71 = OpVariable  %72  Function %73
%64 = OpVariable  %65  Function %66
%68 = OpVariable  %69  Function %70
OpBranch %88
%88 = OpLabel
OpLine %3 13 13
%89 = OpCompositeConstruct  %7  %78 %79 %80 %81
OpLine %3 14 24
%90 = OpVectorShuffle  %6  %89 %89 1 1
%91 = OpDot  %5  %75 %90
%92 = OpFAdd  %6  %75 %91
%93 = OpExtInst  %6  %1 Floor %92
OpLine %3 14 5
OpStore %64 %93
OpLine %3 15 14
%94 = OpLoad  %6  %64
%95 = OpFSub  %6  %75 %94
%96 = OpLoad  %6  %64
%97 = OpVectorShuffle  %6  %89 %89 0 0
%98 = OpDot  %5  %96 %97
%99 = OpFAdd  %6  %95 %98
OpLine %3 17 32
%100 = OpCompositeConstruct  %6  %56 %82
OpLine %3 17 25
%101 = OpCompositeConstruct  %6  %82 %56
%102 = OpCompositeExtract  %5  %99 0
%103 = OpCompositeExtract  %5  %99 1
%105 = OpFOrdLessThan  %104  %102 %103
%108 = OpCompositeConstruct  %107  %105 %105
%106 = OpSelect  %6  %108 %101 %100
OpLine %3 17 5
OpStore %67 %106
OpLine %3 18 26
%109 = OpVectorShuffle  %7  %99 %99 0 1 0 1
%110 = OpVectorShuffle  %7  %89 %89 0 0 2 2
%111 = OpFAdd  %7  %109 %110
%112 = OpLoad  %6  %67
OpLine %3 18 26
%113 = OpCompositeConstruct  %7  %112 %82 %82
%114 = OpFSub  %7  %111 %113
OpLine %3 18 5
OpStore %68 %114
OpLine %3 1 1
%115 = OpLoad  %6  %64
OpLine %3 19 9
%116 = OpCompositeConstruct  %6  %57 %57
%117 = OpFRem  %6  %115 %116
OpLine %3 19 5
OpStore %64 %117
OpLine %3 20 31
%120 = OpAccessChain  %118  %64 %119
%121 = OpLoad  %5  %120
OpLine %3 20 51
%122 = OpAccessChain  %118  %67 %119
%123 = OpLoad  %5  %122
OpLine %3 20 31
%124 = OpCompositeConstruct  %4  %82 %123 %56
%125 = OpFAdd  %4  %121 %124
OpLine %3 20 22
%126 = OpFunctionCall  %4  %53 %125
OpLine %3 20 22
%128 = OpAccessChain  %118  %64 %127
%129 = OpLoad  %5  %128
%130 = OpFAdd  %4  %126 %129
OpLine %3 20 84
%131 = OpAccessChain  %118  %67 %127
%132 = OpLoad  %5  %131
OpLine %3 20 22
%133 = OpCompositeConstruct  %4  %82 %132 %56
%134 = OpFAdd  %4  %130 %133
OpLine %3 20 13
%135 = OpFunctionCall  %4  %53 %134
OpLine %3 21 28
%136 = OpDot  %5  %99 %99
%137 = OpLoad  %7  %68
%138 = OpVectorShuffle  %6  %137 %137 0 1
%139 = OpLoad  %7  %68
%140 = OpVectorShuffle  %6  %139 %139 0 1
%141 = OpDot  %5  %138 %140
%142 = OpLoad  %7  %68
%143 = OpVectorShuffle  %6  %142 %142 2 3
%144 = OpLoad  %7  %68
%145 = OpVectorShuffle  %6  %144 %144 2 3
%146 = OpDot  %5  %143 %145
%147 = OpCompositeConstruct  %4  %136 %141 %146
%148 = OpFSub  %4  %83 %147
OpLine %3 21 24
%149 = OpCompositeConstruct  %4  %82 %82 %82
%150 = OpExtInst  %4  %1 FMax %148 %149
OpLine %3 21 5
OpStore %71 %150
OpLine %3 22 9
%151 = OpLoad  %4  %71
%152 = OpLoad  %4  %71
%153 = OpFMul  %4  %151 %152
OpLine %3 22 5
OpStore %71 %153
OpLine %3 23 9
%154 = OpLoad  %4  %71
%155 = OpLoad  %4  %71
%156 = OpFMul  %4  %154 %155
OpLine %3 23 5
OpStore %71 %156
OpLine %3 24 13
%157 = OpVectorShuffle  %4  %89 %89 3 3 3
%158 = OpFMul  %4  %135 %157
%159 = OpExtInst  %4  %1 Fract %158
%160 = OpVectorTimesScalar  %4  %159 %84
OpLine %3 24 13
%161 = OpFSub  %4  %160 %56
OpLine %3 25 13
%162 = OpExtInst  %4  %1 FAbs %161
OpLine %3 25 13
%163 = OpFSub  %4  %162 %83
OpLine %3 26 14
%164 = OpFAdd  %4  %161 %83
%165 = OpExtInst  %4  %1 Floor %164
OpLine %3 27 14
%166 = OpFSub  %4  %161 %165
OpLine %3 1 1
%167 = OpLoad  %4  %71
OpLine %3 28 9
%168 = OpFMul  %4  %166 %166
%169 = OpFMul  %4  %163 %163
%170 = OpFAdd  %4  %168 %169
%171 = OpVectorTimesScalar  %4  %170 %86
%172 = OpFSub  %4  %85 %171
%173 = OpFMul  %4  %167 %172
OpLine %3 28 5
OpStore %71 %173
OpLine %3 29 13
%174 = OpCompositeExtract  %5  %166 0
%175 = OpCompositeExtract  %5  %99 0
%176 = OpFMul  %5  %174 %175
%177 = OpCompositeExtract  %5  %163 0
%178 = OpCompositeExtract  %5  %99 1
%179 = OpFMul  %5  %177 %178
%180 = OpFAdd  %5  %176 %179
%181 = OpVectorShuffle  %6  %166 %166 1 2
%182 = OpLoad  %7  %68
%183 = OpVectorShuffle  %6  %182 %182 0 2
%184 = OpFMul  %6  %181 %183
%185 = OpVectorShuffle  %6  %163 %163 1 2
%186 = OpLoad  %7  %68
%187 = OpVectorShuffle  %6  %186 %186 1 3
%188 = OpFMul  %6  %185 %187
%189 = OpFAdd  %6  %184 %188
%190 = OpCompositeConstruct  %4  %180 %189
OpLine %3 30 12
%191 = OpLoad  %4  %71
%192 = OpDot  %5  %191 %190
%193 = OpFMul  %5  %87 %192
OpReturnValue %193
OpFunctionEnd
%204 = OpFunction  %5  None %77
%203 = OpFunctionParameter  %6
%202 = OpLabel
%195 = OpVariable  %196  Function %197
%199 = OpVariable  %200  Function %201
%194 = OpVariable  %65  Function %66
%198 = OpVariable  %196  Function %197
OpBranch %208
%208 = OpLabel
OpLine %3 36 13
%209 = OpVectorTimesScalar  %6  %203 %206
OpLine %3 36 5
OpStore %194 %209
OpLine %3 37 5
OpStore %195 %82
OpLine %3 38 5
OpStore %198 %83
OpLine %3 39 17
%210 = OpCompositeConstruct  %6  %207 %207
OpLine %3 40 24
%211 = OpExtInst  %5  %1 Cos %83
OpLine %3 40 14
%212 = OpExtInst  %5  %1 Sin %83
%213 = OpCompositeConstruct  %6  %211 %212
OpLine %3 41 15
%214 = OpCompositeExtract  %5  %213 0
%215 = OpCompositeExtract  %5  %213 1
%216 = OpCompositeExtract  %5  %213 1
%217 = OpFNegate  %5  %216
%218 = OpCompositeExtract  %5  %213 0
%219 = OpCompositeConstruct  %6  %214 %215
%220 = OpCompositeConstruct  %6  %217 %218
%221 = OpCompositeConstruct  %9  %219 %220
OpLine %3 43 10
OpStore %199 %127
OpBranch %222
%222 = OpLabel
OpLine %3 43 5
OpLoopMerge %223 %225 None
OpBranch %224
%224 = OpLabel
OpLine %3 43 22
%226 = OpLoad  %8  %199
%227 = OpULessThan  %104  %226 %205
OpLine %3 43 21
OpSelectionMerge %228 None
OpBranchConditional %227 %228 %229
%229 = OpLabel
OpBranch %223
%228 = OpLabel
OpBranch %230
%230 = OpLabel
OpLine %3 1 1
%232 = OpLoad  %5  %195
%233 = OpLoad  %5  %198
%234 = OpLoad  %6  %194
OpLine %3 44 21
%235 = OpFunctionCall  %5  %76 %234
OpLine %3 44 13
%236 = OpFMul  %5  %233 %235
%237 = OpFAdd  %5  %232 %236
OpLine %3 44 9
OpStore %195 %237
OpLine %3 45 13
%238 = OpLoad  %6  %194
%239 = OpMatrixTimesVector  %6  %221 %238
OpLine %3 45 13
%240 = OpVectorTimesScalar  %6  %239 %84
%241 = OpFAdd  %6  %240 %210
OpLine %3 45 9
OpStore %194 %241
OpLine %3 1 1
%242 = OpLoad  %5  %198
OpLine %3 46 13
%243 = OpFMul  %5  %242 %83
OpLine %3 46 9
OpStore %198 %243
OpBranch %231
%231 = OpLabel
OpBranch %225
%225 = OpLabel
OpLine %3 1 1
%244 = OpLoad  %8  %199
OpLine %3 43 43
%245 = OpIAdd  %8  %244 %119
OpLine %3 43 39
OpStore %199 %245
OpBranch %222
%223 = OpLabel
OpLine %3 1 1
%246 = OpLoad  %5  %195
OpReturnValue %246
OpFunctionEnd
%250 = OpFunction  %4  None %251
%248 = OpFunctionParameter  %6
%249 = OpFunctionParameter  %6
%247 = OpLabel
OpBranch %252
%252 = OpLabel
OpLine %3 77 9
%253 = OpCompositeExtract  %5  %248 0
%254 = OpCompositeExtract  %5  %249 0
%255 = OpCompositeExtract  %5  %249 1
OpLine %3 78 49
%256 = OpFunctionCall  %5  %204 %248
OpLine %3 76 12
%257 = OpExtInst  %5  %1 FMix %254 %255 %256
%258 = OpCompositeExtract  %5  %248 1
%259 = OpCompositeConstruct  %4  %253 %257 %258
OpReturnValue %259
OpFunctionEnd
%263 = OpFunction  %14  None %264
%261 = OpFunctionParameter  %6
%262 = OpFunctionParameter  %6
%260 = OpLabel
OpBranch %267
%267 = OpLabel
OpLine %3 84 13
%268 = OpFunctionCall  %4  %250 %261 %262
OpLine %3 86 29
%269 = OpCompositeConstruct  %6  %265 %82
%270 = OpFAdd  %6  %261 %269
OpLine %3 86 15
%271 = OpFunctionCall  %4  %250 %270 %262
OpLine %3 86 15
%272 = OpFSub  %4  %271 %268
OpLine %3 87 29
%273 = OpCompositeConstruct  %6  %82 %265
%274 = OpFAdd  %6  %261 %273
OpLine %3 87 15
%275 = OpFunctionCall  %4  %250 %274 %262
OpLine %3 87 15
%276 = OpFSub  %4  %275 %268
OpLine %3 88 29
%277 = OpCompositeConstruct  %6  %266 %82
%278 = OpFAdd  %6  %261 %277
OpLine %3 88 15
%279 = OpFunctionCall  %4  %250 %278 %262
OpLine %3 88 15
%280 = OpFSub  %4  %279 %268
OpLine %3 89 29
%281 = OpCompositeConstruct  %6  %82 %266
%282 = OpFAdd  %6  %261 %281
OpLine %3 89 15
%283 = OpFunctionCall  %4  %250 %282 %262
OpLine %3 89 15
%284 = OpFSub  %4  %283 %268
OpLine %3 91 14
%285 = OpExtInst  %4  %1 Cross %276 %272
%286 = OpExtInst  %4  %1 Normalize %285
OpLine %3 92 14
%287 = OpExtInst  %4  %1 Cross %284 %280
%288 = OpExtInst  %4  %1 Normalize %287
OpLine %3 94 14
%289 = OpFAdd  %4  %286 %288
OpLine %3 94 13
%290 = OpVectorTimesScalar  %4  %289 %83
OpLine %3 96 12
%291 = OpCompositeConstruct  %14  %268 %290
OpReturnValue %291
OpFunctionEnd
%296 = OpFunction  %6  None %297
%293 = OpFunctionParameter  %8
%294 = OpFunctionParameter  %10
%295 = OpFunctionParameter  %11
%292 = OpLabel
OpBranch %298
%298 = OpLabel
OpLine %3 101 9
%299 = OpConvertUToF  %5  %293
%300 = OpCompositeExtract  %8  %294 0
OpLine %3 101 9
%301 = OpIAdd  %8  %300 %119
%302 = OpConvertUToF  %5  %301
%303 = OpFRem  %5  %299 %302
%304 = OpCompositeExtract  %8  %294 0
OpLine %3 100 12
%305 = OpIAdd  %8  %304 %119
%306 = OpUDiv  %8  %293 %305
%307 = OpConvertUToF  %5  %306
%308 = OpCompositeConstruct  %6  %303 %307
%309 = OpConvertSToF  %6  %295
%310 = OpFAdd  %6  %308 %309
OpReturnValue %310
OpFunctionEnd
%313 = OpFunction  %4  None %314
%312 = OpFunctionParameter  %6
%311 = OpLabel
OpBranch %319
%319 = OpLabel
OpLine %3 270 9
%320 = OpFunctionCall  %5  %76 %312
OpLine %3 270 9
%321 = OpFMul  %5  %320 %83
OpLine %3 270 9
%322 = OpFAdd  %5  %321 %83
OpLine %3 271 17
%323 = OpCompositeConstruct  %6  %315 %316
%324 = OpFAdd  %6  %312 %323
OpLine %3 271 9
%325 = OpFunctionCall  %5  %76 %324
OpLine %3 271 9
%326 = OpFMul  %5  %325 %83
OpLine %3 271 9
%327 = OpFAdd  %5  %326 %83
OpLine %3 272 17
%328 = OpCompositeConstruct  %6  %317 %318
%329 = OpFAdd  %6  %312 %328
OpLine %3 272 9
%330 = OpFunctionCall  %5  %76 %329
OpLine %3 272 9
%331 = OpFMul  %5  %330 %83
OpLine %3 269 12
%332 = OpFAdd  %5  %331 %83
%333 = OpCompositeConstruct  %4  %322 %327 %332
OpReturnValue %333
OpFunctionEnd
%338 = OpFunction  %2  None %339
%334 = OpLabel
%337 = OpLoad  %19  %335
%341 = OpAccessChain  %340  %29 %127
OpBranch %346
%346 = OpLabel
OpLine %3 111 22
%347 = OpCompositeExtract  %8  %337 0
OpLine %3 113 36
%349 = OpAccessChain  %348  %341 %127
%350 = OpLoad  %10  %349
OpLine %3 113 59
%352 = OpAccessChain  %351  %341 %119
%353 = OpLoad  %11  %352
OpLine %3 113 13
%354 = OpFunctionCall  %6  %296 %347 %350 %353
OpLine %3 115 5
OpLine %3 115 51
%358 = OpAccessChain  %357  %341 %343
%359 = OpLoad  %6  %358
OpLine %3 115 33
%360 = OpFunctionCall  %14  %263 %354 %359
OpLine %3 115 5
%361 = OpAccessChain  %356  %32 %127 %347
OpStore %361 %360
OpLine %3 118 23
%362 = OpCompositeExtract  %8  %337 0
OpLine %3 118 23
%363 = OpIMul  %8  %362 %342
OpLine %3 120 25
%365 = OpAccessChain  %364  %341 %127 %127
%366 = OpLoad  %8  %365
OpLine %3 120 25
%367 = OpAccessChain  %364  %341 %127 %119
%368 = OpLoad  %8  %367
%369 = OpIMul  %8  %366 %368
OpLine %3 120 9
%370 = OpIMul  %8  %369 %342
%371 = OpUGreaterThanEqual  %104  %363 %370
OpLine %3 120 5
OpSelectionMerge %372 None
OpBranchConditional %371 %373 %372
%373 = OpLabel
OpReturn
%372 = OpLabel
OpLine %3 122 28
%374 = OpCompositeExtract  %8  %337 0
OpLine %3 122 15
%375 = OpAccessChain  %364  %341 %127 %127
%376 = OpLoad  %8  %375
%377 = OpUDiv  %8  %374 %376
%378 = OpIAdd  %8  %347 %377
OpLine %3 123 15
%379 = OpIAdd  %8  %378 %119
OpLine %3 124 15
%380 = OpAccessChain  %364  %341 %127 %127
%381 = OpLoad  %8  %380
%382 = OpIAdd  %8  %378 %381
OpLine %3 124 15
%383 = OpIAdd  %8  %382 %119
OpLine %3 125 15
%384 = OpIAdd  %8  %383 %119
OpLine %3 127 5
OpLine %3 127 5
%387 = OpAccessChain  %386  %34 %127 %363
OpStore %387 %378
OpLine %3 128 5
OpLine %3 128 5
%388 = OpIAdd  %8  %363 %119
OpLine %3 128 5
%389 = OpAccessChain  %386  %34 %127 %388
OpStore %389 %383
OpLine %3 129 5
OpLine %3 129 5
%390 = OpIAdd  %8  %363 %343
OpLine %3 129 5
%391 = OpAccessChain  %386  %34 %127 %390
OpStore %391 %384
OpLine %3 130 5
OpLine %3 130 5
%392 = OpIAdd  %8  %363 %344
OpLine %3 130 5
%393 = OpAccessChain  %386  %34 %127 %392
OpStore %393 %378
OpLine %3 131 5
OpLine %3 131 5
%394 = OpIAdd  %8  %363 %345
OpLine %3 131 5
%395 = OpAccessChain  %386  %34 %127 %394
OpStore %395 %384
OpLine %3 132 5
OpLine %3 132 5
%396 = OpIAdd  %8  %363 %205
OpLine %3 132 5
%397 = OpAccessChain  %386  %34 %127 %396
OpStore %397 %379
OpReturn
OpFunctionEnd
%408 = OpFunction  %2  None %339
%398 = OpLabel
%401 = OpLoad  %8  %399
%410 = OpAccessChain  %409  %36 %127
OpBranch %412
%412 = OpLabel
OpLine %3 161 19
%413 = OpIAdd  %8  %401 %343
OpLine %3 161 18
%414 = OpUDiv  %8  %413 %344
OpLine %3 161 13
%415 = OpUMod  %8  %414 %343
%416 = OpConvertUToF  %5  %415
OpLine %3 162 19
%417 = OpIAdd  %8  %401 %119
OpLine %3 162 18
%418 = OpUDiv  %8  %417 %344
OpLine %3 162 13
%419 = OpUMod  %8  %418 %343
%420 = OpConvertUToF  %5  %419
OpLine %3 163 14
%421 = OpCompositeConstruct  %6  %416 %420
OpLine %3 165 30
%422 = OpVectorTimesScalar  %6  %421 %84
%423 = OpFAdd  %6  %411 %422
OpLine %3 165 20
%424 = OpCompositeConstruct  %7  %423 %82 %56
OpLine %3 168 21
%425 = OpCompositeExtract  %5  %421 0
OpLine %3 168 21
%427 = OpAccessChain  %426  %410 %344
%428 = OpLoad  %8  %427
%429 = OpConvertUToF  %5  %428
%430 = OpFMul  %5  %425 %429
%431 = OpCompositeExtract  %5  %421 1
OpLine %3 168 17
%432 = OpAccessChain  %426  %410 %344
%433 = OpLoad  %8  %432
%434 = OpConvertUToF  %5  %433
%435 = OpFMul  %5  %431 %434
%436 = OpFAdd  %5  %430 %435
%437 = OpConvertFToU  %8  %436
OpLine %3 168 17
%438 = OpAccessChain  %426  %410 %345
%439 = OpLoad  %8  %438
%440 = OpIAdd  %8  %437 %439
OpLine %3 170 12
%441 = OpCompositeConstruct  %21  %440 %424 %421
%442 = OpCompositeExtract  %8  %441 0
OpStore %402 %442
%443 = OpCompositeExtract  %7  %441 1
OpStore %404 %443
%444 = OpCompositeExtract  %6  %441 2
OpStore %406 %444
OpReturn
OpFunctionEnd
%459 = OpFunction  %2  None %339
%447 = OpLabel
%445 = OpVariable  %196  Function %197
%446 = OpVariable  %200  Function %201
%450 = OpLoad  %8  %449
%453 = OpLoad  %7  %451
%456 = OpLoad  %6  %454
%448 = OpCompositeConstruct  %21  %450 %453 %456
%460 = OpAccessChain  %409  %36 %127
OpBranch %462
%462 = OpLabel
OpLine %3 181 17
%463 = OpCompositeExtract  %6  %448 2
%464 = OpCompositeExtract  %5  %463 0
OpLine %3 181 17
%465 = OpAccessChain  %426  %460 %344
%466 = OpLoad  %8  %465
%467 = OpConvertUToF  %5  %466
%468 = OpFMul  %5  %464 %467
%469 = OpCompositeExtract  %6  %448 2
%470 = OpCompositeExtract  %5  %469 1
OpLine %3 181 70
%471 = OpAccessChain  %426  %460 %344
%472 = OpLoad  %8  %471
OpLine %3 181 13
%473 = OpAccessChain  %426  %460 %344
%474 = OpLoad  %8  %473
%475 = OpIMul  %8  %472 %474
%476 = OpConvertUToF  %5  %475
%477 = OpFMul  %5  %470 %476
%478 = OpFAdd  %5  %468 %477
%479 = OpConvertFToU  %8  %478
OpLine %3 181 13
%480 = OpAccessChain  %426  %460 %345
%481 = OpLoad  %8  %480
%482 = OpIAdd  %8  %479 %481
OpLine %3 182 32
%483 = OpConvertUToF  %5  %482
OpLine %3 182 22
%484 = OpFDiv  %5  %483 %461
%485 = OpExtInst  %5  %1 Floor %484
%486 = OpConvertFToU  %8  %485
OpLine %3 183 22
%487 = OpUMod  %8  %482 %342
OpLine %3 185 36
%488 = OpAccessChain  %348  %460 %127
%489 = OpLoad  %10  %488
OpLine %3 185 57
%490 = OpAccessChain  %351  %460 %119
%491 = OpLoad  %11  %490
OpLine %3 185 13
%492 = OpFunctionCall  %6  %296 %486 %489 %491
OpLine %3 186 31
%493 = OpAccessChain  %357  %460 %343
%494 = OpLoad  %6  %493
OpLine %3 186 13
%495 = OpFunctionCall  %14  %263 %492 %494
OpLine %3 188 5
OpStore %445 %82
OpLine %3 190 5
OpSelectionMerge %496 None
OpSwitch %487 %503 0 %497 1 %498 2 %499 3 %500 4 %501 5 %502
%497 = OpLabel
OpLine %3 191 37
%504 = OpCompositeExtract  %4  %495 0
%505 = OpCompositeExtract  %5  %504 0
OpLine %3 191 20
OpStore %445 %505
OpBranch %496
%498 = OpLabel
OpLine %3 192 37
%506 = OpCompositeExtract  %4  %495 0
%507 = OpCompositeExtract  %5  %506 1
OpLine %3 192 20
OpStore %445 %507
OpBranch %496
%499 = OpLabel
OpLine %3 193 37
%508 = OpCompositeExtract  %4  %495 0
%509 = OpCompositeExtract  %5  %508 2
OpLine %3 193 20
OpStore %445 %509
OpBranch %496
%500 = OpLabel
OpLine %3 194 37
%510 = OpCompositeExtract  %4  %495 1
%511 = OpCompositeExtract  %5  %510 0
OpLine %3 194 20
OpStore %445 %511
OpBranch %496
%501 = OpLabel
OpLine %3 195 37
%512 = OpCompositeExtract  %4  %495 1
%513 = OpCompositeExtract  %5  %512 1
OpLine %3 195 20
OpStore %445 %513
OpBranch %496
%502 = OpLabel
OpLine %3 196 37
%514 = OpCompositeExtract  %4  %495 1
%515 = OpCompositeExtract  %5  %514 2
OpLine %3 196 20
OpStore %445 %515
OpBranch %496
%503 = OpLabel
OpBranch %496
%496 = OpLabel
OpLine %3 200 15
%516 = OpAccessChain  %364  %460 %127 %127
%517 = OpLoad  %8  %516
%518 = OpUDiv  %8  %486 %517
%519 = OpIAdd  %8  %486 %518
OpLine %3 201 15
%520 = OpIAdd  %8  %519 %119
OpLine %3 202 15
%521 = OpAccessChain  %364  %460 %127 %127
%522 = OpLoad  %8  %521
%523 = OpIAdd  %8  %519 %522
OpLine %3 202 15
%524 = OpIAdd  %8  %523 %119
OpLine %3 203 15
%525 = OpIAdd  %8  %524 %119
OpLine %3 205 5
OpStore %446 %127
OpLine %3 206 5
OpSelectionMerge %526 None
OpSwitch %487 %531 0 %527 3 %527 2 %528 4 %528 1 %529 5 %530
%527 = OpLabel
OpLine %3 207 24
OpStore %446 %519
OpBranch %526
%528 = OpLabel
OpLine %3 208 24
OpStore %446 %525
OpBranch %526
%529 = OpLabel
OpLine %3 209 20
OpStore %446 %524
OpBranch %526
%530 = OpLabel
OpLine %3 210 20
OpStore %446 %520
OpBranch %526
%531 = OpLabel
OpBranch %526
%526 = OpLabel
OpLine %3 213 13
%532 = OpCompositeExtract  %8  %448 0
OpLine %3 213 5
OpStore %446 %532
OpLine %3 222 27
%533 = OpLoad  %5  %445
%534 = OpBitcast  %8  %533
OpLine %3 223 12
%535 = OpLoad  %8  %446
%536 = OpCompositeConstruct  %22  %534 %535
%537 = OpCompositeExtract  %8  %536 0
OpStore %457 %537
%538 = OpCompositeExtract  %8  %536 1
OpStore %458 %538
OpReturn
OpFunctionEnd
%550 = OpFunction  %2  None %339
%539 = OpLabel
%543 = OpLoad  %4  %541
%545 = OpLoad  %4  %544
%540 = OpCompositeConstruct  %14  %543 %545
%552 = OpAccessChain  %551  %39 %127
OpBranch %553
%553 = OpLabel
OpLine %3 254 25
%555 = OpAccessChain  %554  %552 %119
%556 = OpLoad  %23  %555
%557 = OpCompositeExtract  %4  %540 0
OpLine %3 254 25
%558 = OpCompositeConstruct  %7  %557 %56
%559 = OpMatrixTimesVector  %7  %556 %558
OpLine %3 255 18
%560 = OpCompositeExtract  %4  %540 1
OpLine %3 256 12
%561 = OpCompositeExtract  %4  %540 0
%562 = OpCompositeConstruct  %26  %559 %560 %561
%563 = OpCompositeExtract  %7  %562 0
OpStore %546 %563
%564 = OpCompositeExtract  %4  %562 1
OpStore %547 %564
%565 = OpCompositeExtract  %4  %562 2
OpStore %549 %565
OpReturn
OpFunctionEnd
%576 = OpFunction  %2  None %339
%567 = OpLabel
%566 = OpVariable  %72  Function %73
%570 = OpLoad  %7  %569
%572 = OpLoad  %4  %571
%574 = OpLoad  %4  %573
%568 = OpCompositeConstruct  %26  %570 %572 %574
%577 = OpAccessChain  %551  %39 %127
%579 = OpAccessChain  %578  %42 %127
OpBranch %582
%582 = OpLabel
OpLine %3 278 28
%583 = OpCompositeConstruct  %4  %82 %82 %82
OpLine %3 278 17
%584 = OpCompositeConstruct  %4  %265 %265 %265
%585 = OpCompositeExtract  %4  %568 2
%586 = OpExtInst  %4  %1 Fract %585
%587 = OpExtInst  %4  %1 SmoothStep %583 %584 %586
OpLine %3 278 5
OpStore %566 %587
OpLine %3 279 17
%588 = OpCompositeConstruct  %4  %83 %265 %580
OpLine %3 279 13
%589 = OpCompositeConstruct  %4  %581 %581 %581
%590 = OpAccessChain  %118  %566 %127
%591 = OpLoad  %5  %590
%592 = OpAccessChain  %118  %566 %119
%593 = OpLoad  %5  %592
%594 = OpFMul  %5  %591 %593
%595 = OpAccessChain  %118  %566 %343
%596 = OpLoad  %5  %595
%597 = OpFMul  %5  %594 %596
%598 = OpCompositeConstruct  %4  %597 %597 %597
%599 = OpExtInst  %4  %1 FMix %588 %589 %598
OpLine %3 279 5
OpStore %566 %599
OpLine %3 282 25
%601 = OpAccessChain  %600  %579 %119
%602 = OpLoad  %4  %601
%603 = OpVectorTimesScalar  %4  %602 %265
OpLine %3 284 21
%604 = OpAccessChain  %600  %579 %127
%605 = OpLoad  %4  %604
%606 = OpCompositeExtract  %4  %568 2
%607 = OpFSub  %4  %605 %606
%608 = OpExtInst  %4  %1 Normalize %607
OpLine %3 285 20
%610 = OpAccessChain  %609  %577 %127
%611 = OpLoad  %7  %610
%612 = OpVectorShuffle  %4  %611 %611 0 1 2
%613 = OpCompositeExtract  %4  %568 2
%614 = OpFSub  %4  %612 %613
%615 = OpExtInst  %4  %1 Normalize %614
OpLine %3 286 20
%616 = OpFAdd  %4  %615 %608
%617 = OpExtInst  %4  %1 Normalize %616
OpLine %3 288 32
%618 = OpCompositeExtract  %4  %568 1
%619 = OpDot  %5  %618 %608
OpLine %3 288 28
%620 = OpExtInst  %5  %1 FMax %619 %82
OpLine %3 289 25
%621 = OpAccessChain  %600  %579 %119
%622 = OpLoad  %4  %621
%623 = OpVectorTimesScalar  %4  %622 %620
OpLine %3 291 37
%624 = OpCompositeExtract  %4  %568 1
%625 = OpDot  %5  %624 %617
OpLine %3 291 33
%626 = OpExtInst  %5  %1 FMax %625 %82
OpLine %3 291 29
%627 = OpExtInst  %5  %1 Pow %626 %316
OpLine %3 292 26
%628 = OpAccessChain  %600  %579 %119
%629 = OpLoad  %4  %628
%630 = OpVectorTimesScalar  %4  %629 %627
OpLine %3 294 18
%631 = OpFAdd  %4  %603 %623
%632 = OpFAdd  %4  %631 %630
%633 = OpLoad  %4  %566
%634 = OpFMul  %4  %632 %633
OpLine %3 296 12
%635 = OpCompositeConstruct  %7  %634 %56
OpStore %575 %635
OpReturn
OpFunctionEnd