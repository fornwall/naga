// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct _mslBufferSizes {
    uint size1;
    uint size2;
};

struct Particle {
    metal::float2 pos;
    metal::float2 vel;
};
struct SimParams {
    float deltaT;
    float rule1Distance;
    float rule2Distance;
    float rule3Distance;
    float rule1Scale;
    float rule2Scale;
    float rule3Scale;
};
typedef Particle type_3[1];
struct Particles {
    type_3 particles;
};
constant uint NUM_PARTICLES = 1500u;

struct main_Input {
};
kernel void main_(
  metal::uint3 global_invocation_id [[thread_position_in_grid]]
, constant SimParams& params [[buffer(0)]]
, device Particles const& particlesSrc [[buffer(1)]]
, device Particles& particlesDst [[buffer(2)]]
, constant _mslBufferSizes& _buffer_sizes [[buffer(3)]]
) {
    metal::float2 vPos = {};
    metal::float2 vVel = {};
    metal::float2 cMass = {};
    metal::float2 cVel = {};
    metal::float2 colVel = {};
    int cMassCount = {};
    int cVelCount = {};
    metal::float2 pos = {};
    metal::float2 vel = {};
    uint i = {};
    uint index = global_invocation_id.x;
    if (index >= NUM_PARTICLES) {
        return;
    }
    metal::float2 _e8 = particlesSrc.particles[index].pos;
    vPos = _e8;
    metal::float2 _e14 = particlesSrc.particles[index].vel;
    vVel = _e14;
    cMass = metal::float2(0.0, 0.0);
    cVel = metal::float2(0.0, 0.0);
    colVel = metal::float2(0.0, 0.0);
    cMassCount = 0;
    cVelCount = 0;
    i = 0u;
    bool loop_init = true;
    while(true) {
        if (!loop_init) {
            uint _e91 = i;
            i = _e91 + 1u;
        }
        loop_init = false;
        uint _e36 = i;
        if (_e36 >= NUM_PARTICLES) {
            break;
        }
        uint _e39 = i;
        if (_e39 == index) {
            continue;
        }
        uint _e43 = i;
        metal::float2 _e46 = particlesSrc.particles[_e43].pos;
        pos = _e46;
        uint _e49 = i;
        metal::float2 _e52 = particlesSrc.particles[_e49].vel;
        vel = _e52;
        metal::float2 _e53 = pos;
        metal::float2 _e54 = vPos;
        float _e58 = params.rule1Distance;
        if (metal::distance(_e53, _e54) < _e58) {
            metal::float2 _e60 = cMass;
            metal::float2 _e61 = pos;
            cMass = _e60 + _e61;
            int _e63 = cMassCount;
            cMassCount = _e63 + 1;
        }
        metal::float2 _e66 = pos;
        metal::float2 _e67 = vPos;
        float _e71 = params.rule2Distance;
        if (metal::distance(_e66, _e67) < _e71) {
            metal::float2 _e73 = colVel;
            metal::float2 _e74 = pos;
            metal::float2 _e75 = vPos;
            colVel = _e73 - (_e74 - _e75);
        }
        metal::float2 _e78 = pos;
        metal::float2 _e79 = vPos;
        float _e83 = params.rule3Distance;
        if (metal::distance(_e78, _e79) < _e83) {
            metal::float2 _e85 = cVel;
            metal::float2 _e86 = vel;
            cVel = _e85 + _e86;
            int _e88 = cVelCount;
            cVelCount = _e88 + 1;
        }
    }
    int _e94 = cMassCount;
    if (_e94 > 0) {
        metal::float2 _e97 = cMass;
        int _e98 = cMassCount;
        metal::float2 _e101 = vPos;
        cMass = (_e97 / static_cast<float>(_e98)) - _e101;
    }
    int _e103 = cVelCount;
    if (_e103 > 0) {
        metal::float2 _e106 = cVel;
        int _e107 = cVelCount;
        cVel = _e106 / static_cast<float>(_e107);
    }
    metal::float2 _e110 = vVel;
    metal::float2 _e111 = cMass;
    float _e114 = params.rule1Scale;
    metal::float2 _e117 = colVel;
    float _e120 = params.rule2Scale;
    metal::float2 _e123 = cVel;
    float _e126 = params.rule3Scale;
    vVel = ((_e110 + (_e111 * _e114)) + (_e117 * _e120)) + (_e123 * _e126);
    metal::float2 _e129 = vVel;
    metal::float2 _e131 = vVel;
    vVel = metal::normalize(_e129) * metal::clamp(metal::length(_e131), 0.0, 0.1);
    metal::float2 _e137 = vPos;
    metal::float2 _e138 = vVel;
    float _e141 = params.deltaT;
    vPos = _e137 + (_e138 * _e141);
    float _e145 = vPos.x;
    if (_e145 < -1.0) {
        vPos.x = 1.0;
    }
    float _e151 = vPos.x;
    if (_e151 > 1.0) {
        vPos.x = -1.0;
    }
    float _e157 = vPos.y;
    if (_e157 < -1.0) {
        vPos.y = 1.0;
    }
    float _e163 = vPos.y;
    if (_e163 > 1.0) {
        vPos.y = -1.0;
    }
    metal::float2 _e172 = vPos;
    particlesDst.particles[index].pos = _e172;
    metal::float2 _e177 = vVel;
    particlesDst.particles[index].vel = _e177;
    return;
}
